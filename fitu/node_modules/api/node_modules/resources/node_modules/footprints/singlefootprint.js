
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var infra = require('infra');

/*
'id':,
'activity': {id:, name:, startsOn:, endsOn:, picUrl: },
'createdOn':,
'statusId':
*/
var SingleFootprint = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.memberObjId = extension.mongo.tryConvObjId(webreq.search.id);
    me.targetFootprint_CL = new infra.CachedLoader(function () {
        return db.member.getOneMemberFieldsBy({ _id: me.filter.memberObjId }, resxutil.footprint.getFields);
    });
    me.targetActivity_CL = new infra.CachedLoader(function () {
        return me.targetFootprint_CL.load()
        .then(function (fp) {
            if (!fp)
                return null;
            else
                return db.activity.getOneActFieldsBy({ _id: fp.actId }, resxutil.activity.getRelatedActivityFields);
        });
    });
};

SingleFootprint.prototype = Object.create(Resource.prototype);

SingleFootprint.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (!me.filter.memberObjId)
        return bluebird.resolve(httpOptions.setStatus('GET', 400).setStatus('DELETE', 400));
    else if (!me.operator)
        return bluebird.resolve(httpOptions.setStatus('GET', 401).setStatus('DELETE', 401));
    else {
        return bluebird.all([me.operator.isGod(), me.targetFootprint_CL.load()])
        .then(function (data) {
            var god = data[0], fp = data[1];
            if (!fp)
                return httpOptions.setStatus('GET', 404).setStatus('DELETE', 404);
            else if (god)
                return httpOptions.setStatus('GET', 200).setStatus('DELETE', 200);
            else {
                httpOptions.setStatus('DELETE', 401);
                if (fp.userId.equals(me.operator.objId))
                    return httpOptions.setStatus('GET', 200);
                else
                    return httpOptions.setStatus('GET', 401);
            }
        });
    }
};

SingleFootprint.prototype._get = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK())
            return bluebird.all([me.targetFootprint_CL.load(), me.targetActivity_CL.load()]);
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        var fp = data[0], act = data[1];
        if (fp)
            return resxutil.footprint.convFootprintInfo(fp, act ? [act] : []);
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify(data));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};
/*
SingleFootprint.prototype._put = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('PUT');
        if (status.isOK()) {
            if (!me.args)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            return me.targetFootprint_CL.load();
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (currentFp) {
        if (!currentFp)
            throw new errdef.DeferChainKiller(extension.http.webres404());
        var update = {};
        //statusId
        if (validate.value(me.args.statusId)) {
            if (me.args.statusId == constants.status.memberStatus.quit)
                update.statusId = me.args.statusId;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        return db.member.updateMembers({ _id: me.filter.memberObjId }, { $set: update });
    })
    .then(function (ct) {
        if (ct)
            return extension.http.webres200();
        else
            throw new errdef.DeferChainKiller(extension.http.webres500());
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};*/

SingleFootprint.prototype._delete = function () {
    //not implemented
    return bluebird.resolve(extension.http.webres500());
};

module.exports = SingleFootprint;