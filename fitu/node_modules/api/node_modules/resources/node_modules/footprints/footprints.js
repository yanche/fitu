
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var infra = require('infra');

/*
list: [{
'id':,
'activity': {id:, name:, startsOn:, endsOn:, picUrl: },
'createdOn':,
'statusId':
}],
total:
*/
var Footprints = function (webreq) {
    var me = this;
    Resource.call(this, webreq);
    me.filter.userObjId = extension.mongo.tryConvObjId(webreq.search.userId);
    me.pageSize = extension.pagination.convPageSize(webreq.search.pageSize, config.pageSize.footprints.max, config.pageSize.footprints.min, config.pageSize.footprints.default);
    me.page = extension.pagination.convPage(webreq.search.page); //page starts from 0
};

Footprints.prototype = Object.create(Resource.prototype);

Footprints.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (!me.filter.userObjId)
        return bluebird.resolve(httpOptions.setStatus('GET', 400));
    else if (!me.operator)
        return bluebird.resolve(httpOptions.setStatus('GET', 401));
    else if (me.operator.objId.equals(me.filter.userObjId))
        return bluebird.resolve(httpOptions.setStatus('GET', 200));
    else {
        return me.operator.isGodOrOb()
        .then(function (ok) {
            return httpOptions.setStatus('GET', ok ? 200 : 401);
        });
    }
};

Footprints.prototype._get = function () {
    var me = this, prints = null, total = 0;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK()) {
            return bluebird.all([
                db.member.getMembersFieldsInPage({ userId: me.filter.userObjId }, resxutil.footprint.getFields, { createdOn: -1 }, me.page * me.pageSize, me.pageSize),
                db.member.countMembers({ userId: me.filter.userObjId })
            ]);
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        prints = data[0], total = data[1];
        return db.activity.getActsFieldsBy({ _id: { $in: prints.map(function (m) { return m.actId; }) } }, resxutil.activity.getRelatedActivityFields);
    })
    .then(function (acts) {
        return prints.map(function (fp) { return resxutil.footprint.convFootprintInfo(fp, acts); });
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify({ list: data, total: total }));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = Footprints;