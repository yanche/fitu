
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var infra = require('infra');

/*
'id':,
'name':,
'tags': [],
'location':{
	'address':,
	'geo': {lat:, lng:},
	},
'intro':,
'picUrl':,
'vendor': {id:, name:, logoUrl: },
*/
var SingleSite = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.siteObjId = extension.mongo.tryConvObjId(webreq.search.id);
    me.targetSite_CL = new infra.CachedLoader(function () {
        return db.site.getOneSiteFieldsBy({ _id: me.filter.siteObjId }, resxutil.site.getFields);
    });
};

SingleSite.prototype = Object.create(Resource.prototype);

SingleSite.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (!me.filter.siteObjId)
        return bluebird.resolve(httpOptions).setStatus('GET', 400).setStatus('PUT', 400).setStatus('DELETE', 400);
    httpOptions.setStatus('GET', 200);
    if (me.operator) {
        return bluebird.all([me.operator.isGod(), me.targetSite_CL.load()])
        .then(function (data) {
            var god = data[0], site = data[1];
            if (god)
                return httpOptions.setStatus('PUT', 200).setStatus('DELETE', 200);
            else if (site) {
                return httpOptions.setStatus('DELETE', 401);
                return me.operator.vendorWritable(site.vendorId)
                .then(function (ok) {
                    if (ok)
                        return httpOptions.setStatus('PUT', 200);
                    else
                        return httpOptions.setStatus('PUT', 401);
                });
            }
            else
                return httpOptions.setStatus('GET', 404).setStatus('PUT', 404).setStatus('DELETE', 404); //site not found
        });
    }
    else
        return bluebird.resolve(httpOptions.setStatus('PUT', 401).setStatus('DELETE', 401));
};

SingleSite.prototype._get = function () {
    var me = this, site = null;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK())
            return me.targetSite_CL.load();
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (st) {
        if (st) {
            site = st;
            return db.vendor.getOneVendorFieldsBy({ _id: st.vendorId }, resxutil.vendor.getRelatedVendorFields);
        }
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function (vd) {
        return resxutil.site.convSiteInfo(site, vd ? [vd] : []);
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify(data));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SingleSite.prototype._put = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('PUT');
        if (status.isOK()) {
            if (!me.args)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            return me.targetSite_CL.load();
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (currentSite) {
        if (!currentSite)
            throw new errdef.DeferChainKiller(extension.http.webres404());
        var update = {};
        //name
        if (validate.value(me.args.name)) {
            if (validate.valuedString(me.args.name))
                update.name = me.args.name;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //tags
        if (validate.value(me.args.tags)) {
            var tags = validate.tags(me.args.tags);
            if (tags)
                update.tags = tags;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //location
        if (validate.value(me.args.location)) {
            //address
            if (validate.value(me.args.location.address)) {
                if (validate.valuedString(me.args.location.address)) //required
                    update['location.address'] = me.args.location.address;
                else
                    throw new errdef.DeferChainKiller(extension.http.webres400());
            }
            //geo
            if (validate.value(me.args.location.geo)) {
                var geo = validate.geo(me.args.location.geo);
                if (geo)
                    update['location.geo'] = geo;
                else
                    throw new errdef.DeferChainKiller(extension.http.webres400());
            }
        }
        //intro
        if (validate.value(me.args.intro)) {
            if (validate.isString(me.args.intro))
                update.intro = me.args.intro;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //picUrl
        if (validate.value(me.args.picUrl)) {
            if (validate.url(me.args.picUrl) || validate.picBase64(me.args.picUrl))
                update.picUrl = me.args.picUrl;
            else if (validate.nullOrEmptyStr(me.args.picUrl))
                update.picUrl = config.defaultSitePicUrl;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //open
        if (validate.value(me.args.open)) {
            var open = validate.site.validateAndAdjustOpen(me.args.open);
            if (open)
                update.open = open;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //prices
        if (validate.value(me.args.prices)) {
            var prices = validate.site.validateAndAdjustPrices(me.args.prices);
            if (prices)
                update.prices = prices;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        return imageUpload.uploadOneImageOrByPass(update, 'picUrl', 'sites/' + me.filter.siteObjId.toString())
        .then(function () {
            return db.site.updateSites({ _id: me.filter.siteObjId }, { $set: update });
        });
    })
    .then(function (ct) {
        if (ct)
            return extension.http.webres200();
        else
            throw new errdef.DeferChainKiller(extension.http.webres500());
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SingleSite.prototype._delete = function () {
    //not implemented
    return bluebird.resolve(extension.http.webres500());
};

module.exports = SingleSite;