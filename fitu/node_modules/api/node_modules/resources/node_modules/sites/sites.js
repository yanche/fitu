
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var _ = require('underscore');

/*
list: [{
'id':,
'name':,
'tags': [],
'location':{
	'address':,
	'geo': {lat:, lng:},
	},
'intro':,
'picUrl':,
'vendor': {id:, name:, logoUrl: },
}],
total:
*/
var Sites = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.vendorObjId = extension.mongo.tryConvObjId(webreq.search.vendorId);
    me.badFilter = webreq.search.vendorId && !me.filter.vendorObjId;
    me.pageSize = extension.pagination.convPageSize(webreq.search.pageSize, config.pageSize.sites.max, config.pageSize.sites.min, config.pageSize.sites.default);
    me.page = extension.pagination.convPage(webreq.search.page); //page starts from 0
};

Sites.prototype = Object.create(Resource.prototype);

Sites.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (me.badFilter)
        return bluebird.resolve(httpOptions.setStatus('GET', 400).setStatus('POST', 400));
    httpOptions.setStatus('GET', 200);
    if (!me.filter.vendorObjId)
        return bluebird.resolve(httpOptions.setStatus('POST', 400));
    else if (!me.operator)
        return bluebird.resolve(httpOptions.setStatus('POST', 401));
    else {
        return me.operator.isGod()
        .then(function (ok) {
            if (ok)
                return httpOptions.setStatus('POST', 200);
            else {
                return me.operator.vendorWritable(me.filter.vendorObjId)
                .then(function (ok) {
                    return httpOptions.setStatus('POST', ok ? 200 : 401);
                });
            }
        });
    }
};

Sites.prototype._get = function () {
    var me = this, sites = null, total = 0;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK()) {
            var filter = {};
            if (me.filter.vendorObjId) filter.vendorId = me.filter.vendorObjId;
            return bluebird.all([
                db.site.getSitesFieldsInPage(filter, resxutil.site.getFields, { createdOn: -1 }, me.page * me.pageSize, me.pageSize),
                db.site.countSites(filter)
            ]);
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        sites = data[0], total = data[1];
        return db.vendor.getVendorsFieldsBy({ _id: { $in: sites.map(function (st) { return st.vendorId; }) } }, resxutil.vendor.getRelatedVendorFields);
    })
    .then(function (vendors) {
        return sites.map(function (st) { return resxutil.site.convSiteInfo(st, vendors); });
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify({ list: data, total: total }));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

Sites.prototype._post = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK()) {
            if (!me.args || !me.filter.vendorObjId)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            return resxutil.vendor.vendorExistence(me.filter.vendorObjId);
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (ok) {
        if (!ok)
            throw new errdef.DeferChainKiller(extension.http.webres400());
        
        var create = { createdOn: new Date(), vendorId: me.filter.vendorObjId };
        //name
        if (validate.valuedString(me.args.name))
            create.name = me.args.name;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //tags
        var tags = validate.tags(me.args.tags);
        if (tags)
            create.tags = tags;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //location
        if (validate.isObj(me.args.location)) {
            create.location = {};
            //address
            if (validate.valuedString(me.args.location.address))
                create.location.address = me.args.location.address;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
            //geo
            var geo = validate.geo(me.args.location.geo);
            if (geo)
                create.location.geo = geo;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //intro
        if (validate.isString(me.args.intro))
            create.intro = me.args.intro;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //picUrl
        if (validate.url(me.args.picUrl) || validate.picBase64(me.args.picUrl))
            create.picUrl = me.args.picUrl;
        else if (validate.nullOrEmptyStr(me.args.picUrl))
            create.picUrl = config.defaultSitePicUrl;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        return imageUpload.uploadOneImageOrByPass(create, 'picUrl', 'sites/vendor' + create.vendorId.toString())
        .then(function () {
            return db.site.insertOneSite(create);
        });
    })
    .then(function (inserted) {
        return extension.http.webres200(constants.mime.plain, '', { Location: '/sites?id=' + inserted._id.toString() });
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = Sites;