
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var infra = require('infra');
var _ = require('underscore');

/*
{
'id':,
'type':,
'author':,
'createdOn':,
'recipient':,
'subject':,
'content': [],
'emphasis':,
'readOn':,
'removedByAuthorOn':,
'removedByRecipientOn':
}
*/
var SingleNote = function (webreq) {
    var me = this;
    Resource.call(this, webreq);
    me.filter.noteObjId = extension.mongo.tryConvObjId(webreq.search.id);
    me.filter.removeByAuthor = Boolean(webreq.search.byAuthor);
};

SingleNote.prototype = Object.create(Resource.prototype);

SingleNote.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    if (!me.filter.noteObjId)
        return bluebird.resolve(httpOptions.setStatus('PUT', 400).setStatus('DELETE', 400));
    if (!me.operator)
        return bluebird.resolve(httpOptions.setStatus('PUT', 401).setStatus('DELETE', 401));
    else {
        return bluebird.all([me.operator.isGod(), db.note.getOneNoteFieldsBy({ _id: me.filter.noteObjId }, { recipientId: 1, authorId: 1 })])
        .then(function (data) {
            if (!data[1])
                return httpOptions.setStatus('PUT', 404).setStatus('DELETE', 404);
            else if (data[0])
                return httpOptions.setStatus('PUT', 200).setStatus('DELETE', 200);
            else if (data[1].recipientId && data[1].recipientId.equals(me.operator.objId))
                return httpOptions.setStatus('PUT', 200).setStatus('DELETE', me.filter.removeByAuthor ? 401 : 200);
            else if (data[1].authorId.equals(me.operator.objId))
                return httpOptions.setStatus('PUT', 401).setStatus('DELETE', me.filter.removeByAuthor ? 200 : 401);
            else
                return httpOptions.setStatus('PUT', 401).setStatus('DELETE', 401);
        });
    }
};

SingleNote.prototype._put = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('PUT');
        if (status.isOK())
            return db.note.getOneNoteFieldsBy({ _id: me.filter.noteObjId }, { readOn: 1, recipients: 1 });
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (nt) {
        if (!nt)
            throw new errdef.DeferChainKiller(extension.http.webres404());
        else if (nt.recipients) //means act note, this is a record for sender, cannot be updated with readOn
            throw new errdef.DeferChainKiller(extension.http.webres400());
        else if (nt.readOn)
            throw new errdef.DeferChainKiller(extension.http.webres409());
        else
            return db.note.updateNotes({ _id: me.filter.noteObjId }, { $set: { readOn: new Date() } });
    })
    .then(function () {
        return extension.http.webres200();
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SingleNote.prototype._delete = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('DELETE');
        if (status.isOK())
            return db.note.getOneNoteFieldsBy({ _id: me.filter.noteObjId }, { removedByAuthorOn: 1, removedByRecipientOn: 1, recipients: 1, extended: 1 });
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (nt) {
        if (!nt)
            throw new errdef.DeferChainKiller(extension.http.webres404());
        else {
            if (me.filter.removeByAuthor) {
                if (nt.extended) //means extended act note, record for recipient, not removable by author
                    throw new errdef.DeferChainKiller(extension.http.webres400());
                else if (nt.removedByAuthorOn)
                    throw new errdef.DeferChainKiller(extension.http.webres409());
                else
                    return db.note.updateNotes({ _id: me.filter.noteObjId }, { $set: { removedByAuthorOn: new Date() } });
            }
            else {
                if (nt.recipients) //means act note, this is a record for author, not removable by recipient
                    throw new errdef.DeferChainKiller(extension.http.webres400());
                else if (nt.removedByRecipientOn)
                    throw new errdef.DeferChainKiller(extension.http.webres409());
                else
                    return db.note.updateNotes({ _id: me.filter.noteObjId }, { $set: { removedByRecipientOn: new Date() } });
            }
        }
    })
    .then(function () {
        return extension.http.webres200();
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = SingleNote;