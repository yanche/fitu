
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var infra = require('infra');
var _ = require('underscore');

/*
{
'id':,
'type':,
'author':,
'createdOn':,
'recipients': [],
'subject':,
'content': [],
'emphasis':,
}
*/
var SingleNote = function (webreq) {
    var me = this;
    Resource.call(this, webreq);
    me.filter.noteObjId = extension.mongo.tryConvObjId(webreq.search.id);
    me.targetNote_CL = new infra.CachedLoader(function () {
        return db.message.getOneMessageFieldsBy({ _id: me.filter.noteObjId }, resxutil.message.getFields);
    });
};

SingleNote.prototype = Object.create(Resource.prototype);

SingleNote.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    if (!me.filter.noteObjId)
        return bluebird.resolve(httpOptions.setStatus('GET', 400));
    if (!me.operator)
        return bluebird.resolve(httpOptions.setStatus('GET', 401));
    else {
        return bluebird.all([me.operator.isGodOrOb(), me.targetNote_CL.load()])
        .then(function (data) {
            if (!data[1])
                return httpOptions.setStatus('GET', 404);
            else if (data[0])
                return httpOptions.setStatus('GET', 200);
            else if (data[1].authorId.equals(me.operator.objId) || data[1].recipients.some(function (rec) { return rec.equals(me.operator.objId); }))
                return httpOptions.setStatus('GET', 200);
            else
                return httpOptions.setStatus('GET', 401);
        });
    }
};

SingleNote.prototype._get = function () {
    var me = this, note = null;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK())
            return me.targetNote_CL.load();
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (nt) {
        note = nt;
        return db.user.getUsersFieldsBy({ _id: { $in: _.flatten([nt.authorId, nt.recipients]) } }, resxutil.user.getRelatedUserFields);
    })
    .then(function (relatedUsers) {
        return resxutil.note.convNoteInfo(note, relatedUsers);;
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify(data));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = SingleNote;