
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var infra = require('infra');
var _ = require('underscore');
var validate = require('validate');

/*
{
'id':,
'type':,
'author':,
'createdOn':,
'recipient':,
'subject':,
'content': [],
'emphasis':,
'readOn':,
'removedByAuthorOn':,
'removedByRecipientOn':
}
*/
var Notes = function (webreq) {
    var me = this;
    Resource.call(this, webreq);
    me.filter.authorObjId = extension.mongo.tryConvObjId(webreq.search.authorId);
    me.filter.recipientObjId = extension.mongo.tryConvObjId(webreq.search.recipientId);
    me.filter.actObjId = extension.mongo.tryConvObjId(webreq.search.actId);
    me.filter.sys = Boolean(webreq.search.sys);
    me.badFilter = (webreq.search.authorId && !me.filter.authorObjId) || (webreq.search.recipientId && !me.filter.recipientObjId) || (webreq.search.actId && !me.filter.actObjId);
    me.pageSize = extension.pagination.convPageSize(webreq.search.pageSize, config.pageSize.notes.max, config.pageSize.notes.min, config.pageSize.notes.default);
    me.page = extension.pagination.convPage(webreq.search.page); //page starts from 0
};

Notes.prototype = Object.create(Resource.prototype);

Notes.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions(), me = this;
    //POST
    if (me.filter.recipientObjId || me.filter.actObjId)
        httpOptions.setStatus('POST', me.operator ? 200 : 401);
    else
        httpOptions.setStatus('POST', 400);
    //GET, authorObjId and recipientObjId should has one, and only one
    if (me.badFilter || (!me.filter.authorObjId && !me.filter.recipientObjId) || (me.filter.authorObjId && me.filter.recipientObjId))
        return bluebird.resolve(httpOptions.setStatus('GET', 400));
    else if (!me.operator)
        return bluebird.resolve(httpOptions.setStatus('GET', 401));
    else {
        return me.operator.isGodOrOb()
        .then(function (ok) {
            if (ok)
                return httpOptions.setStatus('GET', 200);
            else if (me.operator.objId.equals(me.filter.authorObjId) || me.operator.objId.equals(me.filter.recipientObjId))
                return httpOptions.setStatus('GET', 200);
            else
                return httpOptions.setStatus('GET', 401);
        });
    }
};

Notes.prototype._get = function () {
    var me = this, notes = null, total = 0;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK()) {
            //authorObjId and recipientObjId should has one, and only one
            if (me.filter.authorObjId) {
                var filter = { authorId: me.filter.authorObjId, extended: { $exists: false } };
                return bluebird.all([
                    db.note.getNotesFieldsInPage(filter, resxutil.note.getFields_author, { createdOn: -1 }, me.page * me.pageSize, me.pageSize),
                    db.note.countNotes(filter)
                ]);
            }
            else {
                var filter = { recipientId: me.filter.recipientObjId };
                if (me.filter.sys)
                    filter.type = constants.note.types.system;
                else
                    filter.type = constants.note.types.note;
                return bluebird.all([
                    db.note.getNotesFieldsInPage(filter, resxutil.note.getFields_recipient, { createdOn: -1 }, me.page * me.pageSize, me.pageSize),
                    db.note.countNotes(filter)
                ]);
            }
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        notes = data[0], total = data[1];
        if (me.filter.authorObjId) {
            var relatedUsers = [], relatedActs = [];
            notes.forEach(function (n) {
                if (n.recipientId)
                    relatedUsers.push(n.recipientId);
                if (n.recipients)
                    relatedUsers = relatedUsers.concat(n.recipients);
                if (n.actId)
                    relatedActs.push(n.actId);
            });
        }
        else {
            var relatedUsers = [], relatedActs = [];
            notes.forEach(function (n) {
                relatedUsers.push(n.authorId);
                if (n.actId)
                    relatedActs.push(n.actId);
            });
        }
        return bluebird.all([db.user.getUsersFieldsBy({ _id: { $in: relatedUsers } }, resxutil.user.getRelatedUserFields), db.activity.getActsFieldsBy({ _id: { $in: relatedActs } }, resxutil.activity.getRelatedActivityFields)]);
    })
    .then(function (data) {
        return notes.map(function (note) { return resxutil.note.convNoteInfo(note, data[0], data[1]); });
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify({ list: data, total: total }));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

Notes.prototype._post = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK()) {
            if (me.filter.recipientObjId)
                return me._post_general();
            else if (me.filter.actObjId)
                return me._post_act();
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function () {
        return extension.http.webres200();
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

Notes.prototype._post_general = function () {
    var me = this;
    return db.user.getOneUserFieldsBy({ _id: me.filter.recipientObjId }, { _id: 1 })
    .then(function (recipient) {
        if (!recipient)
            throw new errdef.DeferChainKiller(extension.http.webres404());
        var create = { type: constants.note.types.note, authorId: me.operator.objId, createdOn: new Date(), subject: { type: constants.note.contentTypes.plain }, body: { type: constants.note.contentTypes.plain }, emphasis: Boolean(me.args.emphasis), recipientId: me.filter.recipientObjId };
        if (validate.valuedString(me.args.subject))
            create.subject.content = me.args.subject;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400()); //TODO: no 'enter': /r/n
        if (validate.valuedString(me.args.body))
            create.body.content = me.args.body;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400()); //TODO: no 'enter': /r/n
        return db.note.insertOneNote(create);
    });
};

Notes.prototype._post_act = function () {
    var me = this;
    return me.operator.activityWritable(me.filter.actObjId)
    .then(function (ok) {
        if (ok) {
            return db.member.getMembersFieldsBy({ actId: me.filter.actObjId, statusId: { $in: constants.status.activeMemberStatus } }, { userId: 1 })
            .then(function (mems) {
                if (mems.length > 0)
                    return extension.array.uniqueObjIdArray(mems.map(function (m) { return m.userId; }));
                else
                    throw new errdef.DeferChainKiller(extension.http.webres404());
            });
        }
        else
            throw new errdef.DeferChainKiller(extension.http.webres401());
    })
    .then(function (recipients) {
        var create = { type: constants.note.types.note, authorId: me.operator.objId, createdOn: new Date(), subject: { type: constants.note.contentTypes.plain }, body: { type: constants.note.contentTypes.plain }, emphasis: Boolean(me.args.emphasis), actId: me.filter.actObjId };
        if (validate.valuedString(me.args.subject))
            create.subject.content = me.args.subject;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400()); //TODO: no 'enter': /r/n
        if (validate.valuedString(me.args.body))
            create.body.content = me.args.body;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400()); //TODO: no 'enter': /r/n
        var create_authorrecord = _.extend({}, create, { recipients: recipients });
        var create_extended4recipient = recipients.map(function (recId) { return _.extend({}, create, { recipientId: recId, extended: true }); });
        return db.note.insertNotes(create_extended4recipient.concat([create_authorrecord]));
    });
};

module.exports = Notes;