
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var _ = require('underscore');
var infra = require('infra');

/*
list: [{
'id':,
'site': {id:, name:, location:, picUrl: },
'vendor': {id:, name:, logoUrl: },
'name':,
'startsOn':,
'endsOn':,
'createdOn':,
'createdBy':,
'tags': [],
'intro':,
'picUrl':,
'capacity':,
'price':
'statusId':,
'bar':
}],
total:
*/
//priority: site > vendor
var Activities = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.lead = Boolean(webreq.search.lead);
    me.filter.siteObjId = extension.mongo.tryConvObjId(webreq.search.siteId);
    me.filter.vendorObjId = extension.mongo.tryConvObjId(webreq.search.vendorId);
    me.filter.tag = webreq.search.tag;
    me.filter.active = Boolean(webreq.search.active);
    me.badFilter = (webreq.search.siteId && !me.filter.siteObjId) || (webreq.search.vendorId && !me.filter.vendorObjId);
    me.pageSize = extension.pagination.convPageSize(webreq.search.pageSize, config.pageSize.activities.max, config.pageSize.activities.min, config.pageSize.activities.default);
    me.page = extension.pagination.convPage(webreq.search.page); //page starts from 0
};

Activities.prototype = Object.create(Resource.prototype);

Activities.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (me.badFilter)
        return bluebird.resolve(httpOptions.setStatus('GET', 400).setStatus('POST', 400));
    else {
        httpOptions.setStatus('GET', me.filter.lead && !me.operator ? 401 : 200);
        if (!me.filter.siteObjId)
            return bluebird.resolve(httpOptions.setStatus('POST', 400));
        else if (!me.operator)
            return bluebird.resolve(httpOptions.setStatus('POST', 401));
        else {
            return me.operator.isOb()
            .then(function (ok) {
                if (ok)
                    return httpOptions.setStatus('POST', 401); //ob cannot do this, even if he is god/vendor owner
                else
                    return httpOptions.setStatus('POST', 200);
            });
        }
    }
};

Activities.prototype._get = function () {
    var me = this, activities = null, total = 0;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK()) {
            var getActivities = function (filter) {
                return db.activity.getActsFieldsInPage(filter, resxutil.activity.getFields, { createdOn: -1 }, me.page * me.pageSize, me.pageSize);
            };
            var countActivities = function (filter) {
                return db.activity.countActs(filter);
            };
            var getData = function (filter) {
                return bluebird.all([getActivities(filter), countActivities(filter)]);
            };
            var filter = {};
            //default fetch: only statusId equals active, if lead fetch, then also returns canceled activities
            if (me.filter.lead) filter.createdBy = me.operator.objId;
            else filter.statusId = constants.status.actStatus.active;
            if (me.filter.tag) filter.tags = me.filter.tag;
            if (me.filter.siteObjId)
                filter.siteId = me.filter.siteObjId;
            else if (me.filter.vendorObjId)
                filter.vendorId = me.filter.vendorObjId;
            if (me.filter.active)
                filter.startsOn = { $gt: new Date() };
            return getData(filter);
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        activities = data[0], total = data[1];
        //TODO: optimization
        return bluebird.all([
            db.user.getUsersFieldsBy({ _id: { $in: activities.map(function (a) { return a.createdBy; }) } }, resxutil.user.getRelatedUserFields),
            db.site.getSitesFieldsBy({ _id: { $in: activities.map(function (a) { return a.siteId; }) } }, resxutil.site.getRelatedSiteFields),
            db.vendor.getVendorsFieldsBy({ _id: { $in: activities.filter(function (a) { return a.vendorId; }).map(function (a) { return a.vendorId; }) } }, resxutil.vendor.getRelatedVendorFields),
            db.member.getMembersFieldsBy({ actId: { $in: activities.map(function (a) { return a._id; }) }, statusId: { $in: constants.status.activeMemberStatus } }, { _id: 1, actId: 1 }),
            db.message.getMessagesFieldsBy({ targetId: { $in: activities.map(function (a) { return a._id; }) } }, { _id: 1, targetId: 1 })
        ]);
    })
    .then(function (data) {
        return activities.map(function (act) {
            return resxutil.activity.convActivityInfo(act, data[0], data[1], data[2], data[3], data[4]);
        });
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify({ list: data, total: total }));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

Activities.prototype._post = function () {
    var me = this, targetSite;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK()) {
            if (!me.args || !me.filter.siteObjId)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            return bluebird.all([
                me.filter.vendorObjId ? resxutil.site.siteBelongsToVendor(me.filter.siteObjId, me.filter.vendorObjId) : bluebird.resolve(true),
                db.site.getOneSiteFieldsBy({ _id: me.filter.siteObjId }, { name: 1, fans: 1 })
            ]);
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (dependencies) {
        if (dependencies[0] && dependencies[1]) {
            targetSite = dependencies[1];
            var create = { createdOn: new Date(), createdBy: me.operator.objId, siteId: me.filter.siteObjId, statusId: constants.status.actStatus.active };
            if (me.filter.vendorObjId) {
                create.vendorId = me.filter.vendorObjId;
                return create;
            }
            else {
                return db.site.getOneSiteFieldsBy({ _id: me.filter.siteObjId }, { vendorId: 1 })
                .then(function (site) {
                    create.vendorId = site.vendorId || null;
                    return create;
                });
            }
        }
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
    })
    .then(function (create) {
        //name
        if (validate.valuedString(me.args.name))
            create.name = me.args.name.trim();
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //price
        var price = Number(me.args.price);
        if (!isNaN(price) && price >= 0)
            create.price = price;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //startsOn
        var startsOn = new Date(me.args.startsOn);
        if (!isNaN(startsOn.getTime()) && startsOn.getTime() == me.args.startsOn && startsOn.getTime() >= create.createdOn.getTime())
            create.startsOn = startsOn;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //endsOn
        var endsOn = new Date(me.args.endsOn);
        if (!isNaN(endsOn.getTime()) && endsOn.getTime() == me.args.endsOn && endsOn.getTime() >= create.startsOn.getTime())
            create.endsOn = endsOn;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //tags
        var tags = validate.tags(me.args.tags);
        if (tags)
            create.tags = tags;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //intro
        if (validate.isString(me.args.intro))
            create.intro = me.args.intro.trim();
        else if (validate.nullOrEmptyStr(me.args.intro))
            create.intro = '';
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //bar
        if (validate.value(me.args.bar)) {
            if (validate.isString(me.args.bar) && validate.actBar(me.args.bar.trim()))
                create.bar = me.args.bar.trim();
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //picUrl
        if (validate.picBase64(me.args.picUrl))
            create.picUrl = me.args.picUrl;
        else if (validate.url(me.args.picUrl)) {
            var parsed = extension.string.parseExternalStorageUrl(me.args.picUrl);
            if (parsed)
                create.picUrl = parsed;
            else
                create.picUrl = { path: config.defaultActivityPicUrl, storage: 'local' };
        }
        else if (validate.nullOrEmptyStr(me.args.picUrl))
            create.picUrl = { path: config.defaultActivityPicUrl, storage: 'local' };
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //capacity
        var capacity = Number(me.args.capacity);
        if (!isNaN(capacity) && capacity >= 0)
            create.capacity = capacity;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //recruitment
        create.recruitment = [];
        return imageUpload.uploadOneImageOrByPass(create, 'picUrl', 'activities')
        .then(function () {
            return db.activity.insertOneAct(create);
        });
    })
    .then(function (inserted) {
        //note to act creator
        var creationnote = new resxutil.note.Note();
        //TODO: improve the format
        creationnote.toSysNote({ emphasis: false, subject: '活动**' + inserted.name + '**创建成功！', subjectType: constants.note.contentTypes.markdown, body: '活动详情请[查看](/actdetail?actId=' + inserted._id.toString() + ')  \n已报名人员名单请[查看](/myself/actlead?actId=' + inserted._id.toString() + ')  \n快召集小伙伴一起动起来！', bodyType: constants.note.contentTypes.markdown, recipientObjId: inserted.createdBy });
        //TODO: log if failed
        
        //note to site fans
        var siteFans = targetSite.fans.filter(function (f) { return !f.equals(inserted.createdBy); });
        if (validate.nonEmptyArray(siteFans)) {
            var sitefannotes = siteFans.map(function (fanId) {
                var fannote = new resxutil.note.Note();
                //TODO: improve the format
                fannote.toSysNote({ emphasis: false, subject: '有人在你所关注的场馆*' + targetSite.name + '*召集活动了哟！', subjectType: constants.note.contentTypes.markdown, body: '活动名称：' + inserted.name + '  \n详情请[查看](/actdetail?actId=' + inserted._id.toString() + ')  \n一起动起来！', bodyType: constants.note.contentTypes.markdown, recipientObjId: fanId });
                return fannote;
            });
            //TODO: log if failed
        }
        
        //note to creator fans
        me.operator.userInfo_CL.load()
        .then(function (myinfo) {
            var creatorFans = myinfo.fans.filter(function (f) { return !f.equals(inserted.createdBy); });
            if (validate.nonEmptyArray(creatorFans)) {
                var userfannotes = creatorFans.map(function (fanId) {
                    var fannote = new resxutil.note.Note();
                    //TODO: improve the format
                    fannote.toSysNote({ emphasis: false, subject: '你关注的*' + (myinfo.personal.nickName || '某匿名同学') + '*召集活动了哟！', subjectType: constants.note.contentTypes.markdown, body: '活动名称：' + inserted.name + '  \n详情请[查看](/actdetail?actId=' + inserted._id.toString() + ')  \n快来跟TA一起动起来！', bodyType: constants.note.contentTypes.markdown, recipientObjId: fanId });
                    return fannote;
                });
            }
            var notes = [creationnote];
            if (validate.nonEmptyArray(sitefannotes))
                notes = notes.concat(sitefannotes);
            if (validate.nonEmptyArray(userfannotes))
                notes = notes.concat(userfannotes);
            db.note.insertNotes(notes);
        });
        return extension.http.webres201(constants.mime.json, JSON.stringify({ id: inserted._id }), { Location: '/actdetail?actId=' + inserted._id.toString() });
    })
    .catch(errdef.ImageUploadError, function (err) {
        throw new errdef.DeferChainKiller(extension.http.webres500());
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = Activities;