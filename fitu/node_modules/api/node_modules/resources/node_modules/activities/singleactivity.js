
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var infra = require('infra');

/*
'id':,
'site': {id:, name:, location:, picUrl: },
'name':,
'startsOn':,
'endsOn':,
'createdOn':,
'createdBy':,
'tags': [],
'intro':,
'picUrl':,
'capacity':
*/
var SingleActivity = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.activityObjId = extension.mongo.tryConvObjId(webreq.search.id);
    me.targetAct_CL = new infra.CachedLoader(function () {
        return db.activity.getOneActFieldsBy({ _id: me.filter.activityObjId }, resxutil.activity.getFields);
    });
};

SingleActivity.prototype = Object.create(Resource.prototype);

SingleActivity.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (!me.filter.activityObjId)
        return bluebird.resolve(httpOptions.setStatus('GET', 400).setStatus('PUT', 400).setStatus('DELETE', 400));
    httpOptions.setStatus('GET', 200);
    if (me.operator) {
        return me.operator.isGod()
        .then(function (ok) {
            if (ok)
                return httpOptions.setStatus('PUT', 200).setStatus('DELETE', 200);
            else {
                return me.targetAct_CL.load()
                .then(function (act) {
                    if (act) {
                        return me.operator.activityWritable(act._id)
                        .then(function (ok) {
                            if (ok)
                                return httpOptions.setStatus('PUT', 200).setStatus('DELETE', 200);
                            else
                                return httpOptions.setStatus('PUT', 401).setStatus('DELETE', 401);
                        });
                    }
                    else
                        return httpOptions.setStatus('PUT', 404).setStatus('DELETE', 404);
                });
            }
        });
    }
    else
        return bluebird.resolve(httpOptions);
};

SingleActivity.prototype._get = function () {
    var me = this, activity = null;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK())
            return me.targetAct_CL.load();
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (act) {
        if (act) {
            activity = act;
            return bluebird.all([
                db.user.getOneUserFieldsBy({ _id: act.createdBy }, resxutil.user.getRelatedUserFields),
                db.site.getOneSiteFieldsBy({ _id: act.siteId }, resxutil.site.getRelatedSiteFields),
                db.vendor.getOneVendorFieldsBy({ _id: act.vendorId }, resxutil.vendor.getRelatedVendorFields),
                db.member.getMembersFieldsBy({ actId: act._id, statusId: { $in: constants.status.activeMemberStatus } }, { _id: 1, actId: 1 })
            ]);
        }
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function (data) {
        var creator = data[0], site = data[1], vendor = data[2];
        return resxutil.activity.convActivityInfo(activity, creator ? [creator]: [], site ? [site] : [], vendor ? [vendor] : [], data[3]);
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify(data));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SingleActivity.prototype._put = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('PUT');
        if (status.isOK()) {
            if (!me.args)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            return me.targetAct_CL.load();
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (currentAct) {
        if (!currentAct)
            throw new errdef.DeferChainKiller(extension.http.webres404());
        if (currentAct.statusId == constants.status.actStatus.cancel)
            throw new errdef.DeferChainKiller(extension.http.webres400());
        var update = {};
        //name
        if (validate.value(me.args.name)) {
            if (validate.valuedString(me.args.name))
                update.name = me.args.name;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //price
        if (validate.value(me.args.price)) {
            var price = Number(me.args.price);
            if (!isNaN(price) && price >= 0)
                update.price = price;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //tags
        if (validate.value(me.args.tags)) {
            var tags = validate.tags(me.args.tags);
            if (tags)
                update.tags = tags;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //intro
        if (validate.value(me.args.intro)) {
            if (validate.isString(me.args.intro))
                update.intro = me.args.intro;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //picUrl
        if (validate.value(me.args.picUrl)) {
            if (validate.url(me.args.picUrl) || validate.picBase64(me.args.picUrl))
                update.picUrl = me.args.picUrl;
            else if (validate.nullOrEmptyStr(me.args.picUrl))
                update.picUrl = config.defaultActivityPicUrl;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //capacity
        if (validate.value(me.args.capacity)) {
            var capacity = Number(me.args.capacity);
            if (!isNaN(capacity) && capacity >= 0)
                update.capacity = capacity;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //startsOn
        if (validate.value(me.args.startsOn)) {
            var startsOn = new Date(me.args.startsOn);
            if (validate.valuedString(me.args.startsOn) && !isNaN(startsOn.getTime()) && startsOn.getTime() >= (new Date()).getTime())
                update.startsOn = startsOn;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //endsOn
        if (validate.value(me.args.endsOn)) {
            var endsOn = new Date(me.args.endsOn);
            var startsOn = update.startsOn || currentAct.startsOn;
            if (validate.valuedString(me.args.endsOn) && !isNaN(endsOn.getTime()) && endsOn.getTime() >= startsOn.getTime())
                update.endsOn = endsOn;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        return imageUpload.uploadOneImageOrByPass(update, 'picUrl', 'activities')
            .then(function () {
            return db.activity.updateActs({ _id: me.filter.activityObjId }, { $set: update });
        });
    })
    .then(function (ct) {
        if (ct)
            return extension.http.webres200();
        else
            throw new errdef.DeferChainKiller(extension.http.webres500());
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SingleActivity.prototype._delete = function () {
    var me = this, act = null;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('DELETE');
        if (status.isOK())
            return me.targetAct_CL.load();
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (currentAct) {
        act = currentAct;
        if (currentAct && currentAct.startsOn > new Date() && currentAct.statusId == constants.status.actStatus.active)
            return db.activity.updateActs({ _id: me.filter.activityObjId }, { $set: { statusId: constants.status.actStatus.cancel } });
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function () {
        return db.member.getMembersFieldsBy({ actId: me.filter.activityObjId, statusId: { $in: constants.status.activeMemberStatus } }, { userId: 1 });
    })
    .then(function (mems) {
        if (validate.nonEmptyArray(mems)) {
            var note = new resxutil.note.Note();
            //TODO: improve the format
            note.toSysNote({ emphasis: false, subject: '你报名的活动**' + act.name + '**被取消了', subjectType: constants.note.contentTypes.markdown, body: '活动名称：' + act.name + '  \n详情请[查看](/actdetail?actId=' + act._id.toString() + ')', bodyType: constants.note.contentTypes.markdown, recipients: mems.map(function (m) { return m.userId; }) });
            //TODO: log if failed
            db.note.insertOneNote(note);
        }
    })
    .then(function () {
        return extension.http.webres200();
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = SingleActivity;