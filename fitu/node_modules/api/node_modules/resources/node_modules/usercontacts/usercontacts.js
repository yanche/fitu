
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var errdef = require('errdef');
var resxutil = require('resxutil');
var validate = require('validate');
var config = require('config');
var imageUpload = require('imageUpload');
var Resource = require('resource');
var infra = require('infra');

/*
'personal':{
	'nickName':,
	'phone':,
	'contact':,
	'gender':
	},
'headUrl':,
*/
var UserContacts = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.query = webreq.search.query;
    me.targets_CL = new infra.CachedLoader(function () {
        var query = new RegExp('^' + extension.regex.regEscape(me.filter.query));
        return db.user.getUsersFieldsBy({ $or: [{ 'personal.contact': query }, { 'personal.nickName': query }] }, resxutil.usercontact.getFields);
    });
};

UserContacts.prototype = Object.create(Resource.prototype);

UserContacts.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (!me.filter.query)
        return bluebird.resolve(httpOptions.setStatus('GET', 400));
    else if (!me.operator)
        return bluebird.resolve(httpOptions.setStatus('GET', 401));
    else {
        return bluebird.all([me.operator.isGodOrOb(), me.operator.vendorRole_CL.load()])
        .then(function (data) {
            var vdr = data[1];
            if (data[0])
                return httpOptions.setStatus('GET', 200);
            else if (validate.nonEmptyArray(vdr.owner) || validate.nonEmptyArray(vdr.admin))
                return httpOptions.setStatus('GET', 200);
            else
                return httpOptions.setStatus('GET', 401);
        });
    }
};

UserContacts.prototype._get = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK())
            return me.targets_CL.load();
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        if (data)
            return data.map(function (user) { return resxutil.usercontact.convUserContactInfo(user); });
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify(data));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = UserContacts;
