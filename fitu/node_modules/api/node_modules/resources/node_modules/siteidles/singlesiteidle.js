
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var infra = require('infra');

/*
'id':,
'slots':,
'price':,
'startsOn':,
'endsOn':
'siteId':,
'createdOn':
*/
var SingleSiteIdle = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.siteIdleObjId = extension.mongo.tryConvObjId(webreq.search.id);
    me.targetSiteIdle_CL = new infra.CachedLoader(function () {
        return db.siteidle.getOneSiteIdleFieldsBy({ _id: me.filter.siteIdleObjId }, resxutil.siteidle.getFields);
    });
};

SingleSiteIdle.prototype = Object.create(Resource.prototype);

SingleSiteIdle.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (!me.filter.siteIdleObjId)
        return bluebird.resolve(httpOptions);
    httpOptions.setStatus('GET', 200);
    if (me.operator) {
        return me.operator.isGod()
        .then(function (ok) {
            if (ok)
                return httpOptions.setStatus('PUT', 200).setStatus('DELETE', 200);
            else {
                httpOptions.setStatus('DELETE', 401);
                return me.targetSiteIdle_CL.load()
                .then(function (idle) {
                    if (idle) {
                        return me.operator.vendorWritable(idle.vendorId)
                        .then(function (ok) {
                            if (ok)
                                return httpOptions.setStatus('PUT', 200);
                            else
                                return httpOptions.setStatus('PUT', 401);
                        });
                    }
                    else
                        return httpOptions.setStatus('PUT', 404);
                });
            }
        });
    }
    else
        return bluebird.resolve(httpOptions);
};

SingleSiteIdle.prototype._get = function () {
    var me = this, siteidle = null;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK())
            return me.targetSiteIdle_CL.load();
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (idle) {
        if (idle) {
            siteidle = idle;
            return bluebird.all([
                db.site.getOneSiteFieldsBy({ _id: idle.siteId }, resxutil.site.getRelatedSiteFields),
                db.vendor.getOneVendorFieldsBy({ _id: idle.vendorId }, resxutil.vendor.getRelatedVendorFields)
            ]);
        }
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function (data) {
        var site = data[0], vendor = data[1];
        return resxutil.siteidle.convSiteIdleInfo(siteidle, site ? [site] : [], vendor ? [vendor] : []);
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify(data));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SingleSiteIdle.prototype._put = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('PUT');
        if (status.isOK()) {
            if (!me.args)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            return me.targetSiteIdle_CL.load();
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (currentSiteIdle) {
        if (!currentSiteIdle)
            throw new errdef.DeferChainKiller(extension.http.webres404());
        var update = {};
        //slots
        if (validate.value(me.args.slots)) {
            var slots = Number(me.args.slots);
            if (!isNaN(slots) && slots >= 0)
                update.slots = slots;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //tags
        if (validate.value(me.args.tags)) {
            var tags = validate.tags(me.args.tags);
            if (tags)
                update.tags = tags;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        return db.siteidle.updateSiteIdles({ _id: me.filter.siteIdleObjId }, { $set: update });
    })
    .then(function (ct) {
        if (ct)
            return extension.http.webres200();
        else
            throw new errdef.DeferChainKiller(extension.http.webres500());
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SingleSiteIdle.prototype._delete = function () {
    //not implemented
    return bluebird.resolve(extension.http.webres500());
};

module.exports = SingleSiteIdle;