
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var _ = require('underscore');
var infra = require('infra');

/*
list: [{
'_id':,
'slots':,
'price':,
'startsOn':,
'endsOn':
'tags': [],
'siteId':,
'createdOn':
}],
total:
*/
//context priority: site id > vendor id
var SiteIdles = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.siteObjId = extension.mongo.tryConvObjId(webreq.search.siteId);
    me.filter.vendorObjId = extension.mongo.tryConvObjId(webreq.search.vendorId);
    me.filter.tag = webreq.search.tag;
    me.badFilter = (webreq.search.siteId && !me.filter.siteObjId) || (webreq.search.vendorId && !me.filter.vendorObjId);
    me.pageSize = extension.pagination.convPageSize(webreq.search.pageSize, config.pageSize.siteIdles.max, config.pageSize.siteIdles.min, config.pageSize.siteIdles.default);
    me.page = extension.pagination.convPage(webreq.search.page); //page starts from 0
    me.contextSite_CL = new infra.CachedLoader(function () {
        if (me.filter.siteObjId)
            return db.site.getOneSiteFieldsBy({ _id: me.filter.siteObjId }, { _id: 1, vendorId: 1 });
        else
            return null;
    });
};

SiteIdles.prototype = Object.create(Resource.prototype);

SiteIdles.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (me.badFilter)
        return bluebird.resolve(httpOptions.setStatus('GET', 400).setStatus('POST', 400));
    else {
        httpOptions.setStatus('GET', 200);
        if (!me.filter.siteObjId)
            return bluebird.resolve(httpOptions.setStatus('POST', 400));
        else if (!me.operator)
            return bluebird.resolve(httpOptions.setStatus('POST', 401));
        else {
            return me.operator.isGod()
            .then(function (ok) {
                if (ok)
                    return httpOptions.setStatus('POST', 200);
                else {
                    return me.contextSite_CL.load()
                    .then(function (site) {
                        if (site) {
                            return me.operator.vendorWritable(site.vendorId)
                            .then(function (ok) {
                                return httpOptions.setStatus('POST', ok ? 200 : 401);
                            });
                        }
                        else
                            return httpOptions.setStatus('POST', 400);
                    });
                }
            });
        }
    }
};

SiteIdles.prototype._get = function () {
    var me = this, idles = null, total = 0;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK()) {
            var getSiteIdles = function (filter) {
                return db.siteidle.getSiteIdlesFieldsInPage(filter, resxutil.siteidle.getFields, { createdOn: -1 }, me.page * me.pageSize, me.pageSize);
            };
            var countSiteIdles = function (filter) {
                return db.siteidle.countSiteIdles(filter);
            };
            var getData = function (filter) {
                return bluebird.all([getSiteIdles(filter), countSiteIdles(filter)]);
            };
            var filter = {};
            if (me.filter.tag) filter.tags = me.filter.tag;
            if (me.filter.siteObjId)
                filter.siteId = me.filter.siteObjId;
            else if (me.filter.vendorObjId)
                filter.vendorId = me.filter.vendorObjId;
            return getData(filter);
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        idles = data[0], total = data[1];
        return bluebird.all([
            db.site.getSitesFieldsBy({ _id: { $in: idles.map(function (dl) { return dl.siteId; }) } }, resxutil.site.getRelatedSiteFields),
            db.vendor.getVendorsFieldsBy({ _id: { $in: idles.map(function (dl) { return dl.vendorId; }) } }, resxutil.vendor.getRelatedVendorFields)
        ]);
    })
    .then(function (data) {
        var sites = data[0], vendors = data[1];
        return idles.map(function (idle) { return resxutil.siteidle.convSiteIdleInfo(idle, sites, vendors); });
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify({ list: data, total: total }));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SiteIdles.prototype._post = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK()) {
            if (!me.args || !me.filter.siteObjId)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            return me.contextSite_CL.load();
        }
        else
            throw new errdef.DeferChainKiller(extension.http.webres401());
    })
    .then(function (site) {
        if (!site)
            throw new errdef.DeferChainKiller(extension.http.webres400());
        var create = { createdOn: new Date(), createdBy: me.operator.objId, siteId: me.filter.siteObjId, vendorId: site.vendorId };
        //slots, TODO: interger
        var slots = Number(me.args.slots);
        if (!isNaN(slots) && slots >= 0)
            create.slots = slots;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //price
        var price = Number(me.args.price);
        if (!isNaN(price) && price >= 0)
            create.price = price;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //startsOn
        var startsOn = new Date(me.args.startsOn);
        if (validate.valuedString(me.args.startsOn) && !isNaN(startsOn.getTime()) && startsOn.getTime() >= create.createdOn.getTime())
            create.startsOn = startsOn;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //endsOn
        var endsOn = new Date(me.args.endsOn);
        if (validate.valuedString(me.args.endsOn) && !isNaN(endsOn.getTime()) && endsOn.getTime() >= create.startsOn.getTime())
            create.endsOn = endsOn;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        //tags
        var tags = validate.tags(me.args.tags);
        if (tags)
            create.tags = tags;
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
        return db.siteidle.insertOneSiteIdle(create);
    })
    .then(function (inserted) {
        return extension.http.webres200(constants.mime.plain, '', { Location: '/siteidles?id=' + inserted._id.toString() });
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = SiteIdles;