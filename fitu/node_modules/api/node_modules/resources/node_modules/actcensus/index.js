
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var _ = require('underscore');
var infra = require('infra');

var actcensusResFactory = function (webreq) {
    return new ActCensus(webreq);
};

var ActCensus = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.activityObjId = extension.mongo.tryConvObjId(webreq.search.id);
};

ActCensus.prototype = Object.create(Resource.prototype);

ActCensus.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    return bluebird.resolve(httpOptions.setStatus('GET', this.filter.activityObjId ? 200 : 400));
};

ActCensus.prototype._get = function () {
    var me = this, actmembers;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK())
            return db.activity.getOneActFieldsBy({ _id: me.filter.activityObjId }, { _id: 1 });
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (currentAct) {
        if (currentAct)
            return db.member.getMembersFieldsBy({ actId: currentAct._id }, { userId: 1, statusId: 1 });
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function (data) {
        actmembers = data;
        return db.user.getUsersFieldsBy({ _id: { $in: actmembers.map(function (m) { return m.userId; }) } }, { _id: 1, personal: 1 });
    })
    .then(function (users) {
        var confirmedUsers = [], pendingUsers = [], quitUsers = [];
        users.forEach(function (u) {
            var mems = actmembers.filter(function (m) { return m.userId.equals(u._id); }); //at least 1
            if (mems.some(function (m) { return m.statusId == constants.status.memberStatus.confirmed; }))
                confirmedUsers.push(u);
            else if (mems.some(function (m) { return m.statusId == constants.status.memberStatus.pending; }))
                pendingUsers.push(u);
            else
                quitUsers.push(u);
        });
        return {
            confirmed: countGender(confirmedUsers),
            pending: countGender(pendingUsers),
            quit: countGender(quitUsers)
        };
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify(data)); 
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

var countGender = function (users) {
    var male = 0, female = 0, unknown = 0;
    users.forEach(function (u) {
        var p = u.personal || {};
        if (p.gender == constants.common.gender.male)
            ++male;
        else if (p.gender == constants.common.gender.female)
            ++female;
        else
            ++unknown;
    });
    return { male: male, female: female, unknown: unknown };
};

module.exports = actcensusResFactory;
