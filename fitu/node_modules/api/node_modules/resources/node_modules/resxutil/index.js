var infra = require('infra');
var constants = require('const');

exports.user = require('./user.js');
exports.vendor = require('./vendor.js');
exports.site = require('./site.js');
exports.siteidle = require('./siteidle.js');
exports.activity = require('./activity.js');
exports.member = require('./member.js');
exports.footprint = require('./footprint.js');
exports.usercredentials = require('./usercredentials.js');
exports.usercontact = require('./usercontact.js');
exports.vendorpreview = require('./vendorpreview.js');
exports.message = require('./message.js');
exports.note = require('./note.js');

var Method = function (name) {
    this.name = name;
    this.code = 405;
    this.msg = 'not allowed';
};
Method.prototype.setStatus = function (code, msg) {
    this.code = code;
    this.msg = msg || '';
};
Method.prototype.isOK = function () {
    return this.code == 200;
};
Method.prototype.toWebres = function () {
    return new infra.Webres(this.code, constants.mime.plain, this.msg);
};

var HttpOptions = function () {
    this.GET = new Method('GET');
    this.POST = new Method('POST');
    this.PUT = new Method('PUT');
    this.DELETE = new Method('DELETE');
    this.OPTIONS = new Method('OPTIONS');
    this.OPTIONS.setStatus(200, 'ok');
};
HttpOptions.prototype.setStatus = function (type, code, msg) {
    switch (type) {
        case 'GET':
            this.GET.setStatus(code, msg);
            return this;
        case 'POST':
            this.POST.setStatus(code, msg);
            return this;
        case 'PUT':
            this.PUT.setStatus(code, msg);
            return this;
        case 'DELETE':
            this.DELETE.setStatus(code, msg);
            return this;
        case 'OPTIONS':
            this.OPTIONS.setStatus(code, msg);
            return this;
        default:
            return this;
    }
};
HttpOptions.prototype.getAllowed = function () {
    var ret = [];
    if (this.GET.code == 200)
        ret.push('GET');
    if (this.POST.code == 200)
        ret.push('POST');
    if (this.PUT.code == 200)
        ret.push('PUT');
    if (this.DELETE.code == 200)
        ret.push('DELETE');
    if (this.OPTIONS.code == 200)
        ret.push('OPTIONS');
    return ret;
};
HttpOptions.prototype.getStatus = function (type) {
    switch (type) {
        case 'GET':
            return this.GET;
        case 'POST':
            return this.POST;
        case 'PUT':
            return this.PUT;
        case 'DELETE':
            return this.DELETE;
        case 'OPTIONS':
            return this.OPTIONS;
        default:
            return null;
    }
};

exports.HttpOptions = HttpOptions;