
var resxutil = require('resxutil');
var db = require('dbaccess');
var bluebird = require('bluebird');

exports.getFields = { _id: 1, name: 1, tags: 1, location: 1, intro: 1, logoUrl: 1, ownerId: 1, admins: 1, createdOn: 1, statusId: 1 };
exports.convVendorInfo = function (vd, users) {
    var ret = { id: vd._id.toString(), name: vd.name, tags: vd.tags, location: vd.location, intro: vd.intro, logoUrl: vd.logoUrl, createdOn: vd.createdOn, statusId: vd.statusId };
    var owner = users.filter(function (v) { return v._id.equals(vd.ownerId); })[0];
    var admins = [];
    vd.admins.forEach(function (a) {
        var ad = users.filter(function (v) { return v._id.equals(a); })[0];
        if (ad) admins.push(resxutil.user.convRelatedUserInfo(ad));
    });
    ret.owner = owner ? resxutil.user.convRelatedUserInfo(owner) : null;
    ret.admins = admins;
    return ret;
};
exports.getRelatedVendorFields = { _id: 1, name: 1, logoUrl: 1 };
exports.convRelatedVendorInfo = function (vendor) {
    return { id: vendor._id.toString(), name: vendor.name, logoUrl: vendor.logoUrl };
};
exports.vendorExistence = function (vendorObjId) {
    if (!vendorObjId)
        return bluebird.resolve(false);
    else {
        return db.vendor.getOneVendorFieldsBy({ _id: vendorObjId }, { _id: 1 })
        .then(function (vd) {
            return Boolean(vd);
        });
    }
};
