
var resxutil = require('resxutil');
var db = require('dbaccess');
var bluebird = require('bluebird');
var constants = require('const');

exports.getFields = { '_id': 1, 'type': 1, 'authorId': 1, 'createdOn': 1, 'recipients': 1, 'subject': 1, 'body': 1, 'emphasis': 1 };
exports.convNoteInfo = function (note, relatedUsers) {
    var ret = { id: note._id.toString(), type: note.type, createdOn: note.createdOn, subject: note.subject, body: note.body, emphasis: note.emphasis };
    //author 0: sys
    var author = note.authorId === 0 ? null : relatedUsers.filter(function (ah) { return ah._id.equals(note.authorId); })[0];
    ret.author = author ? resxutil.user.convRelatedUserInfo(author) : null;
    var recipients = [];
    note.recipients.forEach(function (rid) {
        var recp = relatedUsers.filter(function (user) { return user._id.equals(rid); })[0];
        if (recp)
            recipients.push(recp);
    });
    ret.author = author ? resxutil.user.convRelatedUserInfo(author) : null;
    ret.recipients = recipients;
    return ret;
};

var Note = function () {
};
//recipients, subject, content, emphasis
Note.prototype.toSysNote = function (options) {
    this.type = constants.note.types.system;
    this.authorId = 0;
    this.createdOn = new Date();
    this.recipients = options.recipients;
    this.subject = { content: options.subject, type: options.subjectType };
    this.body = { content: options.body, type: options.bodyType };
    this.emphasis = Boolean(options.emphasis);
};

exports.Note = Note;
