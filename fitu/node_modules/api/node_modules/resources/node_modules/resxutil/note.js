
var resxutil = require('resxutil');
var db = require('dbaccess');
var bluebird = require('bluebird');
var constants = require('const');
var _ = require('underscore');

var generalFields = { _id: 1, type: 1, authorId: 1, createdOn: 1, subject: 1, body: 1, emphasis: 1, readOn: 1, removedByAuthorOn: 1, removedByRecipientOn: 1, recipientId: 1 };
var actNoteFields = { _id: 1, type: 1, authorId: 1, createdOn: 1, subject: 1, body: 1, emphasis: 1, removedByAuthorOn: 1, actId: 1, recipients: 1 };
var extendedActNoteFields = { _id: 1, type: 1, authorId: 1, createdOn: 1, subject: 1, body: 1, emphasis: 1, readOn: 1, removedByRecipientOn: 1, actId: 1, recipientId: 1 }; //extended: true

exports.getFields_author = _.extend({}, generalFields, actNoteFields);
exports.getFields_recipient = _.extend({}, generalFields, extendedActNoteFields);
exports.convNoteInfo = function (note, relatedUsers, relatedActs) {
    relatedUsers = relatedUsers || [];
    relatedActs = relatedActs || [];
    var ret = {
        id: note._id.toString(),
        type: note.type,
        createdOn: note.createdOn,
        subject: note.subject,
        body: note.body,
        emphasis: note.emphasis
    };
    //author 0: sys
    var author = note.authorId === 0 ? null : relatedUsers.filter(function (ah) { return ah._id.equals(note.authorId); })[0];
    ret.author = author ? resxutil.user.convRelatedUserInfo(author) : null;
    if (note.recipientId) {
        var recipient = relatedUsers.filter(function (rec) { return rec._id.equals(note.recipientId); })[0];
        ret.recipient = recipient ? resxutil.user.convRelatedUserInfo(recipient) : null;
    }
    if (note.recipients) {
        var recipients = [];
        note.recipients.forEach(function (rid) {
            var recp = relatedUsers.filter(function (user) { return user._id.equals(rid); })[0];
            if (recp)
                recipients.push(resxutil.user.convRelatedUserInfo(recp));
        });
        ret.recipients = recipients;
    }
    if (note.readOn)
        ret.readOn = note.readOn;
    if (note.removedByAuthorOn)
        ret.removedByAuthorOn = note.removedByAuthorOn;
    if (note.removedByRecipientOn)
        ret.removedByRecipientOn = note.removedByRecipientOn;
    if (note.actId) {
        var act = relatedActs.filter(function (a) { return a._id.equals(note.actId); })[0];
        ret.activity = act ? resxutil.activity.convRelatedActivityInfo(act) : null;
    }
    return ret;
};

var Note = function () {
};
//recipients, subject, content, emphasis
Note.prototype.toSysNote = function (options) {
    this.type = constants.note.types.system;
    this.authorId = 0;
    this.createdOn = new Date();
    this.recipientId = options.recipientObjId;
    this.subject = { content: options.subject, type: options.subjectType };
    this.body = { content: options.body, type: options.bodyType };
    this.emphasis = Boolean(options.emphasis);
};

exports.Note = Note;
