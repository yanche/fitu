
var resxutil = require('resxutil');
var db = require('dbaccess');
var bluebird = require('bluebird');

exports.getFields = { '_id': 1, 'slots': 1, 'price': 1, 'startsOn': 1, 'endsOn': 1, 'tags': 1, 'siteId': 1, 'vendorId': 1, 'createdOn': 1 };
exports.convSiteIdleInfo = function (idle, sites, vendors) {
    var ret = { id: idle._id.toString(), slots: idle.slots, price: idle.price, startsOn: idle.startsOn, endsOn: idle.endsOn, tags: idle.tags, createdOn: idle.createdOn };
    var site = sites.filter(function (st) { return st._id.equals(idle.siteId); })[0];
    ret.site = site ? resxutil.site.convRelatedSiteInfo(site) : null;
    var vendor = vendors.filter(function (vd) { return vd._id.equals(idle.vendorId); })[0];
    ret.vendor = vendor ? resxutil.vendor.convRelatedVendorInfo(vendor) : null;
    return ret;
};
exports.getRelatedSiteIdleFields = { '_id': 1, 'slots': 1, 'price': 1, 'startsOn': 1, 'endsOn': 1, 'siteId': 1, 'vendorId': 1 };
exports.convRelatedSiteIdleInfo = function (siteidle) {
    return { id: siteidle._id.toString(), slots: siteidle.slots, price: siteidle.price, startsOn: siteidle.startsOn, endsOn: siteidle.endsOn, siteId: siteidle.siteId.toString(), vendorId: siteidle.vendorId.toString() };
};
exports.siteIdleExistence = function (siteIdleObjId) {
    if (!siteIdleObjId)
        return bluebird.resolve(false);
    else {
        return db.siteidle.getOneSiteIdleFieldsBy({ _id: siteIdleObjId }, { _id: 1 })
        .then(function (idle) {
            return Boolean(idle);
        });
    }
};
exports.siteIdleBelongsToSite = function (siteIdleObjId, siteObjId) {
    return db.siteidle.getOneSiteIdleFieldsBy({ _id: siteIdleObjId, siteId: siteObjId }, { _id: 1 })
    .then(function (idle) {
        return Boolean(idle);
    });
};
