
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var _ = require('underscore');
var infra = require('infra');

var Availability = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.type = webreq.search.type;
    me.filter.value = webreq.search.value;
    me.handler = me.filter.type ? handlers[me.filter.type] : null;
};

Availability.prototype = Object.create(Resource.prototype);

Availability.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (!me.handler || !validate.valuedString(me.filter.value))
        return bluebird.resolve(httpOptions.setStatus('GET', 400));
    else
        return bluebird.resolve(httpOptions.setStatus('GET', 200));
};

Availability.prototype._get = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK())
            return me.handler(me.filter.value);
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (exists) {
        return extension.http.webres200(constants.mime.json, JSON.stringify({ available: exists ? false : true }));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

var handlers = {
    nickName: function (value) {
        return db.user.getOneUserFieldsBy({ 'personal.nickName': value }, { _id: 1 });
    },
    email: function (value) {
        return db.user.getOneUserFieldsBy({ email: value }, { _id: 1 });
    }
};

module.exports = function (webreq) {
    return new Availability(webreq);
};;