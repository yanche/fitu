
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var infra = require('infra');

/*
'id':,
'user': {id:, personal:, headUrl: },
'createdOn':,
'statusId':
*/
var SingleMember = function (webreq) {
    //no preview mode support
    var me = this;
    Resource.call(me, webreq);
    me.filter.memberObjId = extension.mongo.tryConvObjId(webreq.search.id);
    me.targetMember_CL = new infra.CachedLoader(function () {
        return db.member.getOneMemberFieldsBy({ _id: me.filter.memberObjId }, resxutil.member.getFields);
    });
    me.targetActivity_CL = new infra.CachedLoader(function () {
        return me.targetMember_CL.load()
        .then(function (mem) {
            if (!mem)
                return null;
            else
                return db.activity.getOneActFieldsBy({ _id: mem.actId }, resxutil.activity.getRelatedActivityFields);
        });
    });
    me.targetUser_CL = new infra.CachedLoader(function () {
        return me.targetMember_CL.load()
        .then(function (mem) {
            if (!mem)
                return null;
            else
                return db.user.getOneUserFieldsBy({ _id: mem.userId }, resxutil.user.getRelatedUserFields);
        });
    });
};

SingleMember.prototype = Object.create(Resource.prototype);

SingleMember.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (!me.filter.memberObjId)
        return bluebird.resolve(httpOptions.setStatus('GET', 400).setStatus('PUT', 400).setStatus('DELETE', 400));
    else if (!me.operator)
        return bluebird.resolve(httpOptions.setStatus('GET', 401).setStatus('PUT', 401).setStatus('DELETE', 401));
    else {
        return bluebird.all([me.operator.isGod(), me.targetMember_CL.load(), me.targetActivity_CL.load()])
        .then(function (data) {
            var god = data[0], mem = data[1], act = data[2];
            if (!mem)
                return httpOptions.setStatus('GET', 404).setStatus('PUT', 404).setStatus('DELETE', 404);
            else if (god)
                return httpOptions.setStatus('GET', 200).setStatus('PUT', 200).setStatus('DELETE', 200);
            else {
                if (mem.userId.equals(me.operator.objId)) //self
                    return httpOptions.setStatus('GET', 200).setStatus('PUT', 401).setStatus('DELETE', 200);
                else if (act && act.createdBy.equals(me.operator.objId))
                    return httpOptions.setStatus('GET', 200).setStatus('PUT', 200).setStatus('DELETE', 401);
                else
                    return httpOptions.setStatus('GET', 401).setStatus('PUT', 401).setStatus('DELETE', 401);
            }
        });
    }
};

SingleMember.prototype._get = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK())
            return bluebird.all([me.targetMember_CL.load(), me.targetUser_CL.load()]);
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        var mem = data[0], user = data[1];
        if (mem)
            return resxutil.member.convMemberInfo(member, user ? [user] : []);
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify(data));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SingleMember.prototype._put = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('PUT');
        if (status.isOK()) {
            if (!me.args)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            return me.targetMember_CL.load();
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (currentMem) {
        if (!currentMem)
            throw new errdef.DeferChainKiller(extension.http.webres404());
        return me.targetActivity_CL.load();
    })
    .then(function (currentAct) {
        if (currentAct && currentAct.startsOn > new Date() && currentAct.statusId == constants.status.actStatus.active) { //act starts on future
            var update = {};
            //statusId
            if (validate.value(me.args.statusId)) {
                if (me.args.statusId == constants.status.memberStatus.pending || me.args.statusId == constants.status.memberStatus.confirmed)
                    update.statusId = me.args.statusId;
                else
                    throw new errdef.DeferChainKiller(extension.http.webres400());
            }
            return db.member.updateMembers({ _id: me.filter.memberObjId }, { $set: update });
        }
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
    })
    .then(function (ct) {
        if (ct)
            return extension.http.webres200();
        else
            throw new errdef.DeferChainKiller(extension.http.webres500());
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SingleMember.prototype._delete = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('DELETE');
        if (status.isOK())
            return me.targetMember_CL.load();
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (currentMem) {
        if (currentMem)
            return me.targetActivity_CL.load();
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function (currentAct) {
        if (currentAct && currentAct.startsOn > new Date() && currentAct.statusId == constants.status.actStatus.active) //act starts on future
            return db.member.updateMembers({ _id: me.filter.memberObjId }, { $set: { statusId: constants.status.memberStatus.quit } });
        else
            throw new errdef.DeferChainKiller(extension.http.webres400());
    })
    .then(function () {
        return extension.http.webres200();
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = SingleMember;