
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var _ = require('underscore');
var infra = require('infra');

/*
list: [{
'id':,
'user': {id:, personal:, headUrl: },
'createdOn':,
'statusId':
}],
total:
*/
var Members = function (webreq) {
    var me = this;
    Resource.call(this, webreq);
    me.filter.actObjId = extension.mongo.tryConvObjId(webreq.search.actId);
    me.filter.preview = Boolean(webreq.search.preview);
    me.filter.active = Boolean(webreq.search.active);
    me.pageSize = extension.pagination.convPageSize(webreq.search.pageSize, config.pageSize.members.max, config.pageSize.members.min, config.pageSize.members.default);
    me.page = extension.pagination.convPage(webreq.search.page); //page starts from 0
};

Members.prototype = Object.create(Resource.prototype);

Members.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (!me.filter.actObjId)
        return bluebird.resolve(httpOptions.setStatus('GET', 400).setStatus('POST', 400));
    else if (!me.operator || me.filter.preview)
        return bluebird.resolve(httpOptions.setStatus('GET', me.filter.preview ? 200 : 401).setStatus('POST', me.operator ? 200 : 401));
    else {
        //user login, but want full user info
        return me.operator.isGodOrOb()
        .then(function (ok) {
            if (ok) //god nor ob can create member
                return httpOptions.setStatus('GET', 200).setStatus('POST', 401);
            else {
                httpOptions.setStatus('POST', 200);
                return me.operator.activityRole_CL.load()
                .then(function (actr) {
                    return httpOptions.setStatus('GET', actr.some(function (a) { return a.equals(me.filter.actObjId); }) ? 200 : 401);
                });
            }
        });
    }
};

Members.prototype._get = function () {
    var me = this, members = null, total = 0;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK()) {
            var filter = { actId: me.filter.actObjId };
            if (me.filter.active)
                filter.statusId = { $in: constants.status.activeMemberStatus };
            return bluebird.all([
                db.member.getMembersFieldsInPage(filter, resxutil.member.getFields, { createdOn: -1 }, me.page * me.pageSize, me.pageSize),
                db.member.countMembers(filter)
            ]);
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        members = data[0], total = data[1];
        return db.user.getUsersFieldsBy({ _id: { $in: members.map(function (m) { return m.userId; }) } }, me.filter.preview ? resxutil.user.getPublicUserFields : resxutil.user.getRelatedUserFields);
    })
    .then(function (users) {
        return members.map(function (mem) { return resxutil.member.convMemberInfo(mem, users, me.filter.preview); });
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify({ list: data, total: total }));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

Members.prototype._post = function () {
    var me = this, targetAct;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK()) {
            var create = { createdOn: new Date(), actId: me.filter.actObjId, userId: me.operator.objId, statusId: constants.status.memberStatus.pending };
            return bluebird.all([db.member.getOneMemberFieldsBy({ actId: create.actId, userId: create.userId, statusId: { $in: constants.status.activeMemberStatus } }, { _id: 1 }), db.activity.getOneActFieldsBy(create.actId, { _id: 1, name: 1, createdBy: 1, startsOn: 1, statusId: 1 })])
            .then(function (data) {
                if (data[0])
                    throw new errdef.DeferChainKiller(extension.http.webres409()); //already signup
                targetAct = data[1];
                if (targetAct && targetAct.startsOn > new Date() && targetAct.statusId == constants.status.actStatus.active) {
                    if (targetAct.createdBy.equals(me.operator.objId)) //organizer cannot signup
                        throw new errdef.DeferChainKiller(extension.http.webres401());
                    else
                        return db.member.insertOneMember(create);
                }
                else
                    throw new errdef.DeferChainKiller(extension.http.webres400());
            });
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (inserted) {
        //note to signup user
        var note = new resxutil.note.Note();
        //TODO: improve the format
        note.toSysNote({ emphasis: false, subject: '活动**' + targetAct.name + '**报名成功啦！', subjectType: constants.note.contentTypes.markdown, body: '活动详情请[查看](/actdetail?actId=' + targetAct._id.toString() + ')', bodyType: constants.note.contentTypes.markdown, recipientObjId: me.operator.objId });
                
        //note to activity creator
        var note2 = new resxutil.note.Note();
        //TODO: improve the format
        note2.toSysNote({ emphasis: false, subject: '你组织的活动*' + targetAct.name + '*有人报名啦！', subjectType: constants.note.contentTypes.markdown, body: '已报名人员的名单请[查看](/myself/actlead?actId=' + targetAct._id.toString() + ')', bodyType: constants.note.contentTypes.markdown, recipientObjId: targetAct.createdBy });
        //TODO: log if failed
        db.note.insertNotes([note, note2]);
        return extension.http.webres201();
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = Members;