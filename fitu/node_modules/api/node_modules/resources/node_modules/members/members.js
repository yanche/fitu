
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var _ = require('underscore');
var infra = require('infra');

/*
list: [{
'id':,
'user': {id:, personal:, headUrl: },
'activity': {id:, name:, startsOn:, endsOn:, picUrl: },
'createdOn':,
'statusId':
}],
total:
*/
var Members = function (webreq) {
    var me = this;
    Resource.call(this, webreq);
    me.filter.actObjId = extension.mongo.tryConvObjId(webreq.search.actId);
    me.filter.userObjId = extension.mongo.tryConvObjId(webreq.search.userId);
    me.badFilter = (webreq.search.actId && !me.filter.actObjId) || (webreq.search.userId && !me.filter.userObjId);
    me.pageSize = extension.pagination.convPageSize(webreq.search.pageSize, config.pageSize.members.max, config.pageSize.members.min, config.pageSize.members.default);
    me.page = extension.pagination.convPage(webreq.search.page); //page starts from 0
};

Members.prototype = Object.create(Resource.prototype);

Members.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (me.badFilter || (!me.filter.actObjId && !me.filter.userObjId))
        return bluebird.resolve(httpOptions.setStatus('GET', 400).setStatus('POST', 400));
    else if (!me.operator)
        return bluebird.resolve(httpOptions.setStatus('GET', 401).setStatus('POST', 401));
    else {
        return me.operator.isGodOrOb()
        .then(function (ok) {
            if (ok) //god nor ob can create member
                return httpOptions.setStatus('GET', 200).setStatus('POST', 401);
            else {
                httpOptions.setStatus('POST', me.filter.actObjId ? 200 : 400);
                if (me.operator.objId.equals(me.filter.userObjId)) //self
                    return httpOptions.setStatus('GET', 200);
                else if (me.filter.actObjId) {
                    return me.operator.activityRole_CL.load()
                    .then(function (actr) {
                        return httpOptions.setStatus('GET', actr.some(function (a) { return a.equals(me.filter.actObjId); }) ? 200 : 401);
                    });
                }
                else
                    return httpOptions.setStatus('GET', 401);
            }
        });
    }
};

Members.prototype._get = function () {
    var me = this, members = null, total = 0;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK()) {
            if (!me.filter.actObjId && !me.filter.userObjId)
                return bluebird.resolve([[], 0]);
            else {
                var filter = {};
                if (me.filter.actObjId) filter.actId = me.filter.actObjId;
                if (me.filter.userObjId) filter.userId = me.filter.userObjId;
                return bluebird.all([
                    db.member.getMembersFieldsInPage(filter, resxutil.member.getFields, { createdOn: -1 }, me.page * me.pageSize, me.pageSize),
                    db.member.countMembers(filter)
                ]);
            }
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        members = data[0], total = data[1];
        return bluebird.all([
            db.user.getUsersFieldsBy({ _id: { $in: members.map(function (m) { return m.userId; }) } }, resxutil.user.getRelatedUserFields),
            db.activity.getActsFieldsBy({ _id: { $in: members.map(function (m) { return m.actId; }) } }, resxutil.activity.getRelatedActivityFields),
        ]);
    })
    .then(function (data) {
        var users = data[0], acts = data[1];
        return members.map(function (mem) { return resxutil.member.convMemberInfo(mem, users, acts); });
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify({ list: data, total: total }));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

Members.prototype._post = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK()) {
            var create = { createdOn: new Date(), actId: me.filter.actObjId, userId: me.operator.objId, statusId: constants.status.memberStatus.queued };
            return resxutil.activity.activityExistence(create.actId)
            .then(function (ok) {
                if (ok)
                    return db.member.insertOneMember(create);
                else
                    throw new errdef.DeferChainKiller(extension.http.webres400());
            });
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (inserted) {
        return extension.http.webres200(constants.mime.plain, '', { Location: '/members?id=' + inserted._id.toString() });
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = Members;