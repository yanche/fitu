
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var infra = require('infra');

/*
{
'id':,
'targetType':,
'targetId':,
'words':,
'author':,
'replyTo':,
'createdOn':,
'like': [ array of user id]
}
*/
var SingleMessage = function (webreq) {
    var me = this;
    Resource.call(this, webreq);
    me.filter.msgObjId = extension.mongo.tryConvObjId(webreq.search.id);
};

SingleMessage.prototype = Object.create(Resource.prototype);

SingleMessage.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    return bluebird.resolve(httpOptions.setStatus('GET', this.filter.msgObjId ? 200 : 400).setStatus('POST', this.filter.msgObjId ? (this.operator ? 200 : 401) : 400));
};

SingleMessage.prototype._get = function () {
    var me = this, message;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK())
            return db.message.getOneMessageFieldsBy({ _id: me.filter.msgObjId }, resxutil.message.getFields);
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (msg) {
        if (msg) {
            message = msg;
            var authUsers = [message.authorId];
            if (message.replyToUserId)
                authUsers.push(message.replyToUserId);
            return db.user.getUsersFieldsBy({ _id: { $in: authUsers } }, resxutil.user.getRelatedUserFields);
        }
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function (relatedUsers) {
        return resxutil.message.convMsgInfo(message, relatedUsers, me.operator ? me.operator.objId : null);;
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify(data));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SingleMessage.prototype._post = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK())
            return db.message.getOneMessageFieldsBy({ _id: me.filter.msgObjId }, { _id: 1 });
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (msg) {
        if (msg)
            return db.message.updateMessages({ _id: me.filter.msgObjId }, me.args.like ? { $addToSet: { like: me.operator.objId } } : { $pull: { like: me.operator.objId } });
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function () {
        return extension.http.webres200(constants.mime.plain, '');
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = SingleMessage;