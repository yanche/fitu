
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var errdef = require('errdef');
var validate = require('validate');
var config = require('config');
var Resource = require('resource');
var resxutil = require('resxutil');
var infra = require('infra');

/*
{
email:,
hash_pwd:,
confirm_hash_pwd:
}
*/
var SingleCredential = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.userObjId = extension.mongo.tryConvObjId(webreq.search.userId);
    me.targetUser_CL = new infra.CachedLoader(function () {
        return db.user.getOneUserFieldsBy({ _id: me.filter.userObjId }, resxutil.usercredentials.getFields);
    });
    me.confirmPwd = true;
};

SingleCredential.prototype = Object.create(Resource.prototype);

SingleCredential.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (!me.filter.userObjId)
        return bluebird.resolve(httpOptions.setStatus('POST', 400));
    else if (!me.operator)
        return bluebird.resolve(httpOptions.setStatus('POST', 401));
    else if (me.filter.userObjId.equals(me.operator.objId))
        return bluebird.resolve(httpOptions.setStatus('POST', 200));
    else {
        return me.operator.isGod()
        .then(function (ok) {
            if (ok)
                me.confirmPwd = false;
            return httpOptions.setStatus('POST', ok ? 200 : 401);
        });
    }
};

SingleCredential.prototype._post = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK()) {
            if (!me.args)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            return me.targetUser_CL.load();
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (current) {
        if (!current)
            throw new errdef.DeferChainKiller(extension.http.webres404());
        else if (me.confirmPwd && (!current.wechatOpenId || current.hash_pwd) && current.hash_pwd != (me.args.confirm_hash_pwd || '').toLowerCase()) //origin pwd not match
            throw new errdef.DeferChainKiller(extension.http.webres401());
        var update = {};
        //email
        if (validate.value(me.args.email)) {
            if (validate.email(me.args.email))
                update.email = me.args.email.toLowerCase();
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //hash_pwd
        if (validate.value(me.args.hash_pwd)) {
            if (validate.hash(me.args.hash_pwd))
                update.hash_pwd = me.args.hash_pwd.toLowerCase();
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        return resxutil.user.checkDup(update.email, null, me.operator.objId)
        .then(function (ok) {
            if (ok)
                return db.user.updateUsers({ _id: me.filter.userObjId }, { $set: update });
            else
                throw new errdef.DeferChainKiller(extension.http.webres409());
        });
    })
    .then(function (ct) {
        if (ct)
            return extension.http.webres200();
        else
            throw new errdef.DeferChainKiller(extension.http.webres500());
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

var credentialResFactory = function (webreq) {
    return new SingleCredential(webreq);
};

module.exports = credentialResFactory;
