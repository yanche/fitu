
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var infra = require('infra');

var Credits = function (webreq) {
    Resource.call(this, webreq);
    this.filter.userObjId = extension.mongo.tryConvObjId(webreq.search.userId);
};

Credits.prototype = Object.create(Resource.prototype);

Credits.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (!me.filter.userObjId)
        return bluebird.resolve(httpOptions.setStatus('GET', 400));
    else if (!me.operator)
        return bluebird.resolve(httpOptions.setStatus('GET', 401));
    else {
        if (me.filter.userObjId.equals(me.operator.objId))
            return bluebird.resolve(httpOptions.setStatus('GET', 200));
        else {
            return me.operator.isGodOrOb()
            .then(function (ok) {
                return httpOptions.setStatus('GET', ok ? 200 : 401);
            });
        }
    }
};

Credits.prototype._get = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK())
            return bluebird.all([
                db.site.countSites({ createdBy: me.filter.userObjId }),
                db.activity.countActs({ createdBy: me.filter.userObjId }),
                db.member.countMembers({ userId: me.filter.userObjId, statusId: constants.status.memberStatus.confirmed }),
                db.member.countMembers({ userId: me.filter.userObjId, statusId: constants.status.memberStatus.pending }),
                db.user.getOneUserFieldsBy({ _id: me.filter.userObjId }, { fans: 1 })
            ]);
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        if (!data[4])
            throw new errdef.DeferChainKiller(extension.http.webres404());
        else {
            var credits = data[0] * 100 + data[1] * 40 + data[2] * 15 + data[3] * 5 + (data[4].fans || []).length * 15;
            return extension.http.webres200(constants.mime.json, JSON.stringify({ credits: credits }));
        }
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = function (webreq) {
    return new Credits(webreq);
};;