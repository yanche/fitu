
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var infra = require('infra');

/*
'id':,
'tags': [],
'location':{
	'address':,
	'geo': {lat:, lng:},
	},
'intro':,
'logoUrl':,
'owner': {id:, headUrl:, personal: },
'admins': [{id:, headUrl:, personal: }],
'statusId':,
*/
var SingleVendor = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.vendorObjId = extension.mongo.tryConvObjId(webreq.search.id);
    me.targetVendor_CL = new infra.CachedLoader(function () {
        return db.vendor.getOneVendorFieldsBy({ _id: me.filter.vendorObjId }, resxutil.vendor.getFields);
    });
};

SingleVendor.prototype = Object.create(Resource.prototype);

SingleVendor.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (!me.filter.vendorObjId)
        return bluebird.resolve(httpOptions.setStatus('GET', 400).setStatus('POST', 400).setStatus('DELETE', 400));
    httpOptions.setStatus('GET', 200);
    if (me.operator) {
        return bluebird.all([me.operator.isGod(), me.operator.vendorWritable(me.filter.vendorObjId)])
        .then(function (data) {
            var god = data[0], vd = data[1];
            if (god)
                return httpOptions.setStatus('POST', 200).setStatus('DELETE', 200);
            else
                return httpOptions.setStatus('POST', vd ? 200 : 401).setStatus('DELETE', 401);
        });
    }
    else
        return bluebird.resolve(httpOptions.setStatus('POST', 401).setStatus('DELETE', 401));
};

SingleVendor.prototype._get = function () {
    var me = this, vendor = null;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK())
            return me.targetVendor_CL.load();
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (vd) {
        if (vd) {
            vendor = vd;
            var relatedUserIds = [vd.ownerId].concat(vd.admins);
            return db.user.getUsersFieldsBy({ _id: { $in: relatedUserIds } }, resxutil.user.getRelatedUserFields);
        }
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function (users) {
        return resxutil.vendor.convVendorInfo(vendor, users);
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify(data));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SingleVendor.prototype._post = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK()) {
            if (!me.args)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            return me.targetVendor_CL.load();
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (currentVd) {
        if (!currentVd)
            throw new errdef.DeferChainKiller(extension.http.webres404());
        var update = {};
        //name
        if (validate.value(me.args.name)) {
            if (validate.valuedString(me.args.name))
                update.name = me.args.name;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //tags
        if (validate.value(me.args.tags)) {
            var tags = validate.tags(me.args.tags);
            if (tags)
                update.tags = tags;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //location
        if (validate.value(me.args.location)) {
            //address
            if (validate.value(me.args.location.address)) {
                if (validate.valuedString(me.args.location.address)) //required
                    update['location.address'] = me.args.location.address;
                else
                    throw new errdef.DeferChainKiller(extension.http.webres400());
            }
            //geo
            if (validate.value(me.args.location.geo)) {
                var geo = validate.geo(me.args.location.geo);
                if (geo)
                    update['location.geo'] = geo;
                else
                    throw new errdef.DeferChainKiller(extension.http.webres400());
            }
        }
        //intro
        if (validate.value(me.args.intro)) {
            if (validate.isString(me.args.intro))
                update.intro = me.args.intro;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //logoUrl
        if (validate.value(me.args.logoUrl)) {
            if (validate.url(me.args.logoUrl) || validate.picBase64(me.args.logoUrl))
                update.logoUrl = me.args.logoUrl;
            else if (validate.nullOrEmptyStr(me.args.logoUrl))
                update.logoUrl = config.defaultVendorLogoUrl;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //admins
        if (validate.value(me.args.admins)) {
            if (Array.isArray(me.args.admins))
                update.admins = extension.array.uniqueObjIdArray(me.args.admins);
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //contact
        if (validate.value(me.args.contact)) {
            if (validate.isString(me.args.contact))
                update.contact = me.args.contact;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //TODO: owner, only by GOD?
        return (validate.nonEmptyArray(update.admins) ? resxutil.user.userExistence(update.admins) : bluebird.resolve(true))
        .then(function (ok) {
            if (ok)
                return imageUpload.uploadOneImageOrByPass(update, 'logoUrl', 'vendors');
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        })
        .then(function () {
            return db.vendor.updateVendors({ _id: me.filter.vendorObjId }, { $set: update });
        });
    })
    .then(function (ct) {
        if (ct)
            return extension.http.webres200();
        else
            throw new errdef.DeferChainKiller(extension.http.webres500());
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SingleVendor.prototype._delete = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('DELETE');
        if (status.isOK())
            return me.targetVendor_CL.load();
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (currentVD) {
        if (currentVD)
            return db.vendor.updateVendors({ _id: me.filter.vendorObjId }, { $set: { statusId: constants.status.vendorStatus.inactive } });
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function () {
        //inactivate all belonging sites
        return db.site.updateSites({ vendorId: me.filter.vendorObjId }, { $set: { statusId: constants.status.siteStatus.inactive } });
    })
    .then(function () {
        return extension.http.webres200();
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = SingleVendor;