
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var _ = require('underscore');
var infra = require('infra');

/*
list: [{
'id':,
'tags': [],
'location':{
	'address':,
	'geo': {lat:, lng:},
	},
'intro':,
'logoUrl':,
'owner': {id:, headUrl:, personal: },
'admins': [{id:, headUrl:, personal: }]
'statusId':,
}],
total:
*/
var Vendors = function (webreq) {
    Resource.call(this, webreq);
    this.filter.managable = Boolean(webreq.search.managable);
    this.filter.active = Boolean(webreq.search.active);
    this.pageSize = extension.pagination.convPageSize(webreq.search.pageSize, config.pageSize.vendors.max, config.pageSize.vendors.min, config.pageSize.vendors.default);
    this.page = extension.pagination.convPage(webreq.search.page); //page starts from 0
};

Vendors.prototype = Object.create(Resource.prototype);

Vendors.prototype._accessibility = function () {
    var me = this;
    var httpOptions = new resxutil.HttpOptions();
    httpOptions.setStatus('GET', 200);
    if (!me.operator)
        return bluebird.resolve(httpOptions.setStatus('POST', 401));
    else {
        return me.operator.isGod()
        .then(function (ok) {
            if (ok)
                return httpOptions.setStatus('POST', 200);
            else
                return httpOptions.setStatus('POST', 401);
        });
    }
};

Vendors.prototype._get = function () {
    var me = this, vendors = null, total = 0;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        var getVendors = function (filter) {
            return db.vendor.getVendorsFieldsInPage(filter, resxutil.vendor.getFields, { createdOn: -1 }, me.page * me.pageSize, me.pageSize);
        };
        var countVendors = function (filter) {
            return db.vendor.countVendors(filter);
        };
        var getData = function (filter) {
            return bluebird.all([getVendors(filter), countVendors(filter)]);
        };
        if (status.isOK()) {
            var filter = {};
            if (me.filter.active)
                filter.statusId = constants.status.vendorStatus.active;
            if (me.filter.managable) {
                return me.operator.isGodOrOb()
                .then(function (ok) {
                    if (!ok)
                        filter.$or = [{ ownerId: me.operator.objId }, { admins: me.operator.objId }];
                    return getData(filter);
                });
            }
            else
                return getData(filter);
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        vendors = data[0], total = data[1];
        var relatedUserIds = [];
        vendors.forEach(function (vd) { relatedUserIds.push(vd.ownerId); relatedUserIds.push(vd.admins); });
        return db.user.getUsersFieldsBy({ _id: { $in: _.flatten(relatedUserIds) } }, resxutil.user.getRelatedUserFields);
    })
    .then(function (users) {
        return vendors.map(function (vd) { return resxutil.vendor.convVendorInfo(vd, users); });
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify({ list: data, total: total }));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

Vendors.prototype._post = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK()) {
            if (!me.args)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            var create = { createdOn: new Date(), statusId: constants.status.vendorStatus.active };
            //name
            if (validate.valuedString(me.args.name))
                create.name = me.args.name;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
            //tags
            var tags = validate.tags(me.args.tags);
            if (tags)
                create.tags = tags;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
            //location
            if (validate.isObj(me.args.location)) {
                create.location = {};
                //address
                if (validate.valuedString(me.args.location.address))
                    create.location.address = me.args.location.address;
                else
                    throw new errdef.DeferChainKiller(extension.http.webres400());
                //geo
                var geo = validate.geo(me.args.location.geo);
                if (geo)
                    create.location.geo = geo;
                else
                    throw new errdef.DeferChainKiller(extension.http.webres400());
            }
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
            //intro
            if (validate.isString(me.args.intro))
                create.intro = me.args.intro;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
            //logoUrl
            if (validate.url(me.args.logoUrl) || validate.picBase64(me.args.logoUrl))
                create.logoUrl = me.args.logoUrl;
            else if (validate.nullOrEmptyStr(me.args.logoUrl))
                create.logoUrl = config.defaultVendorLogoUrl;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
            //ownerId
            create.ownerId = extension.mongo.tryConvObjId(me.args.ownerId);
            if (!create.ownerId)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            //admins, optional
            if (validate.value(me.args.admins)) {
                if (Array.isArray(me.args.admins))
                    create.admins = extension.array.uniqueObjIdArray(me.args.admins);
                else
                    throw new errdef.DeferChainKiller(extension.http.webres400());
            }
            //contact
            if (validate.isString(me.args.contact))
                create.contact = me.args.contact;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
            return resxutil.user.userExistence(extension.array.uniqueObjIdArray([create.ownerId].concat(create.admins)))
            .then(function (ok) {
                if (ok)
                    return imageUpload.uploadOneImageOrByPass(create, 'logoUrl', 'vendors');
                else
                    throw new errdef.DeferChainKiller(extension.http.webres400());
            })
            .then(function () {
                return db.vendor.insertOneVendor(create);
            });
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (inserted) {
        return extension.http.webres200(constants.mime.plain, '', { Location: '/vendors?id=' + inserted._id.toString() });
    })
    .catch(errdef.ImageUploadError, function (err) {
        throw new errdef.DeferChainKiller(extension.http.webres500());
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = Vendors;