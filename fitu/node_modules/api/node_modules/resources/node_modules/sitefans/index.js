
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var _ = require('underscore');

var sitefansResFactory = function (webreq) {
    return new SiteFans(webreq);
};

var SiteFans = function (webreq) {
    Resource.call(this, webreq);
    this.filter.targetSiteObjId = extension.mongo.tryConvObjId(webreq.search.siteId);
};

SiteFans.prototype = Object.create(Resource.prototype);

SiteFans.prototype._accessibility = function () {
    var me = this;
    var httpOptions = new resxutil.HttpOptions();
    if (me.filter.targetSiteObjId) {
        if (me.operator)
            return bluebird.resolve(httpOptions.setStatus('GET', 200).setStatus('POST', 200).setStatus('DELETE', 200));
        else
            return bluebird.resolve(httpOptions.setStatus('GET', 401).setStatus('POST', 401).setStatus('DELETE', 401));
    }
    else
        return bluebird.resolve(httpOptions.setStatus('GET', 400).setStatus('POST', 400).setStatus('DELETE', 400));
};

//{subscribe: }
SiteFans.prototype._get = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK())
            return db.user.getOneUserFieldsBy({ _id: me.operator.objId }, { 'subscribe.sites': 1 });
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (self) {
        var subscribeSite = self.subscribe.sites.some(function (s) { return s.equals(me.filter.targetSiteObjId); });
        return extension.http.webres200(constants.mime.json, JSON.stringify({ subscribe: subscribeSite }));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SiteFans.prototype._post = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK())
            return db.site.getOneSiteFieldsBy({ _id: me.filter.targetSiteObjId }, { _id: 1 });
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (site) {
        if (site) {
            return bluebird.all([
                db.user.updateUsers({ _id: me.operator.objId }, { $addToSet: { 'subscribe.sites': me.filter.targetSiteObjId } }),
                db.site.updateSites({ _id: me.filter.targetSiteObjId }, { $addToSet: { fans: me.operator.objId } })
            ]);
        }
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function () {
        return extension.http.webres201(constants.mime.plain, '');
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SiteFans.prototype._delete = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('DELETE');
        if (status.isOK()) {
            return bluebird.all([
                db.user.updateUsers({ _id: me.operator.objId }, { $pull: { 'subscribe.sites': me.filter.targetSiteObjId } }),
                db.site.updateSites({ _id: me.filter.targetSiteObjId }, { $pull: { fans: me.operator.objId } })
            ]);
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function () {
        return extension.http.webres200(constants.mime.plain, '');
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = sitefansResFactory;
