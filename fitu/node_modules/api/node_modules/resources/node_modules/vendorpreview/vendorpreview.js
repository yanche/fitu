
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var infra = require('infra');

/*
list: [{
'id':,
'name':,
'logoUrl':,
}],
total:
*/
var VendorPreviews = function (webreq) {
    Resource.call(this, webreq);
    this.managable = Boolean(webreq.search.managable);
    this.filter.active = Boolean(webreq.search.active);
    this.pageSize = extension.pagination.convPageSize(webreq.search.pageSize, config.pageSize.vendorPreview.max, config.pageSize.vendorPreview.min, config.pageSize.vendorPreview.default);
    this.page = extension.pagination.convPage(webreq.search.page); //page starts from 0
};

VendorPreviews.prototype = Object.create(Resource.prototype);

VendorPreviews.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    httpOptions.setStatus('GET', !this.managable || this.operator ? 200 : 401);
    return bluebird.resolve(httpOptions);
};

VendorPreviews.prototype._get = function () {
    var me = this, total = 0;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        var getVendors = function (filter) {
            return db.vendor.getVendorsFieldsInPage(filter, resxutil.vendorpreview.getFields, { createdOn: -1 }, me.page * me.pageSize, me.pageSize);
        };
        var countVendors = function (filter) {
            return db.vendor.countVendors(filter);
        };
        var getData = function (filter) {
            return bluebird.all([getVendors(filter), countVendors(filter)]);
        };
        if (status.isOK()) {
            var filter = {};
            if (me.filter.active)
                filter.statusId = constants.status.vendorStatus.active;
            if (me.managable && me.operator) {
                return me.operator.isGodOrOb()
                .then(function (ok) {
                    if (!ok)
                        filter.$or = [{ ownerId: me.operator.objId }, { admins: me.operator.objId }];
                    return getData(filter);
                });
            }
            else
                return getData(filter);
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        total = data[1];
        return data[0].map(function (vd) { return resxutil.vendorpreview.convVendorPreview(vd); });
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify({ list: data, total: total }));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = VendorPreviews;