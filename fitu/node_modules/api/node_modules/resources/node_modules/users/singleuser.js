
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var errdef = require('errdef');
var resxutil = require('resxutil');
var validate = require('validate');
var config = require('config');
var imageUpload = require('imageUpload');
var Resource = require('resource');
var infra = require('infra');

/*
'personal':{
	'nickName':,
	'phone':,
	'contact':,
	'gender':
	},
'email':,
'headUrl':,
*/
var SingleUser = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.userObjId = extension.mongo.tryConvObjId(webreq.search.id);
    me.filter.preview = Boolean(webreq.search.preview);
    me.targetUser_CL = new infra.CachedLoader(function () {
        return db.user.getOneUserFieldsBy({ _id: me.filter.userObjId }, me.filter.preview ? resxutil.user.getPublicUserFields : resxutil.user.getFields);
    });
};

SingleUser.prototype = Object.create(Resource.prototype);

SingleUser.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (!me.filter.userObjId)
        return bluebird.resolve(httpOptions.setStatus('GET', 400).setStatus('PUT', 400).setStatus('DELETE', 400));
    else if (!me.operator)
        return bluebird.resolve(httpOptions.setStatus('GET', me.filter.preview ? 200 : 401).setStatus('PUT', 401).setStatus('DELETE', 401));
    else if (me.filter.userObjId.equals(me.operator.objId))
        return bluebird.resolve(httpOptions.setStatus('GET', 200).setStatus('PUT', 200).setStatus('DELETE', 401));
    else {
        return bluebird.all([me.operator.isGod(), me.operator.isOb()])
        .then(function (data) {
            if (data[0])
                return httpOptions.setStatus('GET', 200).setStatus('PUT', 200).setStatus('DELETE', 200);
            else if (data[1])
                return httpOptions.setStatus('GET', 200).setStatus('PUT', 401).setStatus('DELETE', 401);
            else
                return httpOptions.setStatus('GET', me.filter.preview ? 200 : 401).setStatus('PUT', 401).setStatus('DELETE', 401);
        });
    }
};

SingleUser.prototype._get = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK())
            return me.targetUser_CL.load();
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        if (data)
            return me.filter.preview ? resxutil.user.convPublicUserInfo(data) : resxutil.user.convUserInfo(data);
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify(data));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SingleUser.prototype._put = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('PUT');
        if (status.isOK()) {
            if (!me.args)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            return me.targetUser_CL.load();
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (currentUser) {
        if (!currentUser)
            throw new errdef.DeferChainKiller(extension.http.webres404());
        var update = {};
        //headUrl
        if (validate.value(me.args.headUrl)) {
            if (validate.url(me.args.headUrl) || validate.picBase64(me.args.headUrl))
                update.headUrl = me.args.headUrl;
            else if (validate.emptyString(me.args.headUrl))
                update.headUrl = config.defaultHeadUrl;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        //personal
        if (validate.value(me.args.personal)) {
            //nick name
            if (validate.value(me.args.personal.nickName)) {
                if (validate.nickName(me.args.personal.nickName))
                    update['personal.nickName'] = me.args.personal.nickName;
                else if (validate.emptyStr(me.args.personal.nickName))
                    update['personal.nickName'] = null;
                else
                    throw new errdef.DeferChainKiller(extension.http.webres400());
            }
            //phone
            if (validate.value(me.args.personal.phone)) {
                if (validate.phone(me.args.personal.phone))
                    update['personal.phone'] = me.args.personal.phone;
                else if (validate.nullOrEmptyStr(me.args.personal.phone))
                    update['personal.phone'] = null;
                else
                    throw new errdef.DeferChainKiller(extension.http.webres400());
            }
            //contact
            if (validate.value(me.args.personal.contact)) {
                if (validate.email(me.args.personal.contact)) //must have some value
                    update['personal.contact'] = me.args.personal.contact.toLowerCase();
                else
                    throw new errdef.DeferChainKiller(extension.http.webres400());
            }
            //gender
            if (validate.value(me.args.personal.gender)) {
                if (validate.gender(me.args.personal.gender))
                    update['personal.gender'] = me.args.personal.gender;
                else if (validate.emptyStr(me.args.personal.gender))
                    update['personal.gender'] = '';
                else
                    throw new errdef.DeferChainKiller(extension.http.webres400());
            }
        }
        if (extension.obj.objLen(update) == 0)
            throw new errdef.DeferChainKiller(extension.http.webres400());
        return resxutil.user.checkDup(null, update['personal.nickName'])
        .then(function (ok) {
            if (ok)
                return imageUpload.uploadOneImageOrByPass(update, 'headUrl', 'users');
            else
                throw new errdef.DeferChainKiller(extension.http.webres409());
        })
        .then(function () {
            return db.user.updateUsers({ _id: me.filter.userObjId }, { $set: update });
        });
    })
    .then(function (ct) {
        if (ct)
            return extension.http.webres200();
        else
            throw new errdef.DeferChainKiller(extension.http.webres500());
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

SingleUser.prototype._delete = function () {
    //not implemented
    return bluebird.resolve(extension.http.webres500());
};

module.exports = SingleUser;
