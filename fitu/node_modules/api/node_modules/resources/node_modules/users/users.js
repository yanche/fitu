
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');

/*
list: [{
'personal':{
	'nickName':,
	'phone':,
	'contact':,
	'gender':
	},
'email':,
'headUrl':,
'fansCount':,
'subscribe': {usersCount: },
}],
total:
*/
var Users = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.preview = Boolean(webreq.search.preview);
    me.filter.fansOfObjId = extension.mongo.tryConvObjId(webreq.search.fansOf);
    me.filter.subscribedUsersOfObjId = extension.mongo.tryConvObjId(webreq.search.subscribedUsersOf);
    me.badFilter = (webreq.search.fansOf && !me.filter.fansOfObjId) || (webreq.search.subscribedUsersOf && !me.filter.subscribedUsersOfObjId);
    me.pageSize = extension.pagination.convPageSize(webreq.search.pageSize, config.pageSize.users.max, config.pageSize.users.min, config.pageSize.users.default);
    me.page = extension.pagination.convPage(webreq.search.page); //page starts from 0
};

Users.prototype = Object.create(Resource.prototype);

Users.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    httpOptions.setStatus('POST', 200);
    var me = this;
    if (me.badFilter || (!me.filter.fansOfObjId && !me.filter.subscribedUsersOfObjId))
        return bluebird.resolve(httpOptions.setStatus('GET', 400));
    else if (me.operator && !me.filter.preview) {
        return me.operator.isGodOrOb()
        .then(function (ok) {
            return httpOptions.setStatus('GET', ok ? 200 : 401);
        });
    }
    else
        return bluebird.resolve(httpOptions.setStatus('GET', me.filter.preview ? 200 : 401));
};

Users.prototype._get = function () {
    var me = this, total = 0;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK()) {
            return bluebird.all([
                me.filter.fansOfObjId ? db.user.getOneUserFieldsBy({ _id: me.filter.fansOfObjId }, { fans: 1 }) : bluebird.resolve(null),
                me.filter.subscribedUsersOfObjId ? db.user.getOneUserFieldsBy({ _id: me.filter.subscribedUsersOfObjId }, { 'subscribe.users': 1 }) : bluebird.resolve(null),
            ]);
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        var fansUser = data[0], subscribedUsersUser = data[1];
        if ((me.filter.fansOfObjId && !fansUser) || (me.filter.subscribedUsersOfObjId && !subscribedUsersUser))
            throw new errdef.DeferChainKiller(extension.http.webres404());
        else if (!fansUser && !subscribedUsersUser)
            throw new errdef.DeferChainKiller(extension.http.webres400());
        else {
            if (fansUser && subscribedUsersUser) {
                //intersect, TODO: optimization
                var closure = fansUser.fans.filter(function (f) {
                    return subscribedUsersUser.subscribe.users.some(function (s) { s.equals(f); });
                });
            }
            else
                var closure = fansUser ? fansUser.fans : subscribedUsersUser.subscribe.users;
            return bluebird.all([
                db.user.getUsersFieldsInPage({ _id: { $in: closure } }, me.filter.preview ? resxutil.user.getPublicUserFields : resxutil.user.getFields, { createdOn: -1 }, me.page * me.pageSize, me.pageSize),
                db.user.countUsers({ _id: { $in: closure } })
            ]);
        }
    })
    .then(function (data) {
        total = data[1];
        return data[0].map(function (d) { return me.filter.preview ? resxutil.user.convPublicUserInfo(d) : resxutil.user.convUserInfo(d); });
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify({ list: data, total: total }));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

Users.prototype._post = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK()) {
            if (!me.args)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            var create = { special: 0, fans: [], subscribe: { users: [], sites: [] } };
            //email
            if (validate.email(me.args.email))
                create.email = me.args.email.toLowerCase();
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
            //hash_pwd
            if (validate.hash(me.args.hash_pwd))
                create.hash_pwd = me.args.hash_pwd.toLowerCase();
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
            //headUrl
            if (validate.url(me.args.headUrl) || validate.picBase64(me.args.headUrl))
                create.headUrl = me.args.headUrl;
            else if (validate.nullOrEmptyStr(me.args.headUrl))
                create.headUrl = config.defaultHeadUrl;
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
            //personal
            if (validate.value(me.args.personal)) {
                create.personal = {};
                //nick name
                if (validate.nickName(me.args.personal.nickName))
                    create.personal.nickName = me.args.personal.nickName;
                else if (!validate.nullOrEmptyStr(me.args.personal.headUrl))
                    throw new errdef.DeferChainKiller(extension.http.webres400());
                //phone
                if (validate.phone(me.args.personal.phone))
                    create.personal.phone = me.args.personal.phone;
                else if (!validate.nullOrEmptyStr(me.args.personal.headUrl))
                    throw new errdef.DeferChainKiller(extension.http.webres400());
                //contact
                if (validate.email(me.args.personal.contact))
                    create.personal.contact = me.args.personal.contact.toLowerCase();
                else if (!validate.nullOrEmptyStr(me.args.personal.contact))
                    throw new errdef.DeferChainKiller(extension.http.webres400());
                else
                    create.personal.contact = create.email;
                //gender
                if (validate.gender(me.args.personal.gender))
                    create.personal.gender = me.args.personal.gender;
                else if (!validate.nullOrEmptyStr(me.args.personal.gender))
                    throw new errdef.DeferChainKiller(extension.http.webres400());
                else
                    create.personal.gender = '';
            }
            else
                create.personal = { gender: '男', contact: create.email };
            return resxutil.user.checkDup(create.email, create.personal.nickName)
            .then(function (ok) {
                if (ok)
                    return imageUpload.uploadOneImageOrByPass(create, 'headUrl', 'users');
                else
                    throw new errdef.DeferChainKiller(extension.http.webres409());
            })
            .then(function () {
                return db.user.insertOneUser(create);
            });
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (inserted) {
        var note = new resxutil.note.Note();
        note.toSysNote({ emphasis: false, subject: '恭喜你注册成功啦！', subjectType: constants.note.contentTypes.plain, body: '在这里找到一群热爱运动的小伙伴吧！', bodyType: constants.note.contentTypes.plain, recipients: [inserted._id] });
        //TODO: log if failed
        db.note.insertOneNote(note);
        return extension.http.webres201(constants.mime.plain, '', { Location: '/users?id=' + inserted._id.toString() });
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = Users;