
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var errdef = require('errdef');
var validate = require('validate');
var config = require('config');
var Resource = require('resource');
var resxutil = require('resxutil');

var Sessions = function (webreq) {
    Resource.call(this, webreq);
};

Sessions.prototype = Object.create(Resource.prototype);

Sessions.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    return bluebird.resolve(httpOptions.setStatus('POST', 200));
};

Sessions.prototype._post = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK()) {
            if (!me.args)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            var authdata = {};
            //email
            if (validate.email(me.args.email))
                authdata.email = me.args.email.toLowerCase();
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
            //hash_pwd
            if (validate.hash(me.args.hash_pwd))
                authdata.hash_pwd = me.args.hash_pwd.toLowerCase();
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
            return db.user.getOneUserFieldsBy(authdata, { '_id': 1 })
            .then(function (user) {
                if (user) {
                    var now = new Date();
                    return db.session.insertOneSession({ 'userId': user._id, 'sessionId': extension.random.getRandomWithTimestamp(), 'createdOn': now, 'lastAccess': now });
                }
                else
                    throw new errdef.DeferChainKiller(extension.http.webres401());
            });
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (inserted) {
        if (inserted)
            return extension.http.webres201(constants.mime.json, JSON.stringify({ sessionId: inserted.sessionId.toString(), userId: inserted.userId.toString() }));
        else
            return extension.http.webres500();
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = Sessions;