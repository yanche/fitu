
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var infra = require('infra');
var _ = require('underscore');
var validate = require('validate');

var pendingNotesResFactory = function (webreq) {
    return new PendingNotes(webreq);
};

var PendingNotes = function (webreq) {
    var me = this;
    Resource.call(this, webreq);
    me.filter.recipientObjId = extension.mongo.tryConvObjId(webreq.search.recipientId);
};

PendingNotes.prototype = Object.create(Resource.prototype);

PendingNotes.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    var me = this;
    if (!me.filter.recipientObjId)
        return bluebird.resolve(httpOptions.setStatus('GET', 400));
    else {
        return me.operator.isGodOrOb()
        .then(function (ok) {
            if (ok) //god nor ob can create member
                return httpOptions.setStatus('GET', 200);
            else
                return httpOptions.setStatus('GET', me.operator.objId.equals(me.filter.recipientObjId) ? 200 : 401);
        });
    }
};

PendingNotes.prototype._get = function () {
    var me = this, notes = null, total = 0;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK()) {
            return bluebird.all([
                db.note.countNotes({ recipientId: me.filter.recipientObjId, type: constants.note.types.system, readOn: null }),
                db.note.countNotes({ recipientId: me.filter.recipientObjId, type: constants.note.types.note, readOn: null })
            ]);
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify({ note: data[1], sys: data[0] }));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = pendingNotesResFactory;
