
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var infra = require('infra');
var _ = require('underscore');
var validate = require('validate');
var moment = require('moment');
var email = require('email');

var pwdresetResFactory = function (webreq) {
    return new PwdReset(webreq);
};

/*
{
_id:
userId:
createdOn:
}
*/
var PwdReset = function (webreq) {
    Resource.call(this, webreq);
};

PwdReset.prototype = Object.create(Resource.prototype);

PwdReset.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    return bluebird.resolve(httpOptions.setStatus('POST', 200));
};

//409: dup reset request, 500: email issue
PwdReset.prototype._post = function () {
    var me = this, userObjId, userEmail, newPwd, oldhashpwd;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK()) {
            if (!me.args || !validate.valuedString(me.args.email))
                throw new errdef.DeferChainKiller(extension.http.webres400());
            else
                return db.user.getOneUserFieldsBy({ email: me.args.email.toLowerCase() }, { _id: 1, email: 1, hash_pwd: 1 });
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (currentUser) {
        if (!currentUser)
            throw new errdef.DeferChainKiller(extension.http.webres400());
        userObjId = currentUser._id;
        userEmail = currentUser.email;
        oldhashpwd = currentUser.hash_pwd;
        return db.pwdreset.getOnePwdresetFieldsBy({ createdOn: { $gt: moment().add({ days: -2 })._d }, userId: userObjId }, { _id: 1 });
    })
    .then(function (dup) {
        if (dup)
            throw new errdef.DeferChainKiller(extension.http.webres409());
        newPwd = extension.random.getRandomAlphas(6);
        return db.user.updateUsers({ _id: userObjId }, { $set: { hash_pwd: extension.crypto.sha1(newPwd) } });
    })
    .then(function () {
        return email.sendEmail({ toList: [userEmail], subject: '1DONG：密码重置', body: email.formatPwdresetNotification(newPwd) });
    })
    .catch(errdef.EmailError, function (err) {
        console.log(err);
        //rollback
        db.user.updateUsers({ _id: userObjId }, { $set: { hash_pwd: oldhashpwd } });
        throw new errdef.DeferChainKiller(extension.http.webres500()); //email issue
    })
    .then(function () {
        return db.pwdreset.insertOnePwdreset({ userId: userObjId, createdOn: new Date() });
    })
    .then(function () {
        return extension.http.webres200();
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = pwdresetResFactory;
