
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var _ = require('underscore');
var infra = require('infra');
var smsproviders = require('smsproviders');
var log = require('log');

/*
{
smsId:,
provider:,
type:,
createdOn:,
userId:,
vcode:,
expiredOn:,
claimedOn:,
}
*/
var SmsVC = function (webreq) {
    Resource.call(this, webreq);
    this.vcType = webreq.search.type;
};

SmsVC.prototype = Object.create(Resource.prototype);

SmsVC.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    return bluebird.resolve(httpOptions.setStatus('POST', this.operator ? 200 : 401));
};

var handlers = {};
handlers[constants.smsvc.type.mobileV] = function () {
    var me = this, smsp = smsproviders.getSmsProvider();
    return bluebird.all([db.user.getOneUserFieldsBy({ _id: me.operator.objId }, { mobileV: 1, personal: 1 }), db.smsvc.getOneSmsVCFieldsBy({ userId: me.operator.objId, type: constants.smsvc.type.mobileV, createdOn: { $gt: extension.datetime.getDateWithOffset({ minutes: -1 }) } }, { _id: 1 })])
    .then(function (data) {
        var targetUser = data[0];
        if (data[1]) //last sms within 1 second
            throw new errdef.DeferChainKiller(extension.http.webres400WithData(constants.mime.json, JSON.stringify({ errcode: constants.errcodes.requestMobileVC.frequency })));
        else if (!targetUser) //basically should not happen because this func needs authn
            throw new errdef.DeferChainKiller(extension.http.webres400WithData());
        else if (!targetUser.personal || !targetUser.personal.phone) //no phone set
            throw new errdef.DeferChainKiller(extension.http.webres400WithData(constants.mime.json, JSON.stringify({ errcode: constants.errcodes.requestMobileVC.noPhone })));
        else if (targetUser.mobileV && targetUser.mobileV.phone == targetUser.personal.phone) //already have mobileV
            throw new errdef.DeferChainKiller(extension.http.webres400WithData(constants.mime.json, JSON.stringify({ errcode: constants.errcodes.requestMobileVC.verified })));
        else
            return smsp.handler({ toMobile: targetUser.personal.phone });
    })
    .catch(errdef.SmsError, function (err) {
        log.error({ type: 'sms error' }, { err: err.stack });
        throw new errdef.DeferChainKiller(extension.http.webres500());
    })
    .then(function (smsRet) {
        var now = new Date();
        var exp = extension.datetime.getDateWithOffset({ ref: now, minutes: 30 });
        return db.smsvc.insertOneSmsVC({
            smsRet: smsRet,
            provider: smsp.name,
            type: constants.smsvc.type.mobileV,
            userId: me.operator.objId,
            vcode: smsRet.vcode,
            createdOn: now,
            expiredOn: exp
        });
    })
    .then(function (inserted) {
        //maybe i should move this http-faced code to upper layer, not the sms handler layer
        return extension.http.webres201(constants.mime.json, JSON.stringify({ id: inserted._id }));
    });
};

SmsVC.prototype._post = function () {
    var me = this, targetSite;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK()) {
            var handler = handlers[me.vcType];
            if (!handler)
                throw new errdef.DeferChainKiller(extension.http.webres400());
            return handler.call(me);
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (ret) {
        //just a placeholder for some post-send things
        return ret;
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = SmsVC;