
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var _ = require('underscore');
var infra = require('infra');
var smsproviders = require('smsproviders');
var log = require('log');

/*
{
smsId:,
provider:,
type:,
createdOn:,
userId:,
vcode:,
expiredOn:,
claimedOn:,
}
*/
var SingleSmsVC = function (webreq) {
    Resource.call(this, webreq);
    this.vcType = webreq.search.type;
    this.filter.smsvcObjId = extension.mongo.tryConvObjId(webreq.search.id);
};

SingleSmsVC.prototype = Object.create(Resource.prototype);

SingleSmsVC.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    return bluebird.resolve(httpOptions.setStatus('POST', this.filter.smsvcObjId ?(this.operator ? 200 : 401):400));
};

var handlers = {};
handlers[constants.smsvc.type.mobileV] = function () {
    var me = this, now = new Date();
    return bluebird.all([db.user.getOneUserFieldsBy({ _id: me.operator.objId }, { personal: 1, mobileV: 1 }), db.smsvc.getOneSmsVCFieldsBy({ _id: me.filter.smsvcObjId, userId: me.operator.objId, type: constants.smsvc.type.mobileV }, { _id: 1, vcode: 1, expiredOn: 1, claimedOn: 1 })])
    .then(function (data) {
        var targetUser = data[0], smsvc = data[1];
        if (!smsvc)
            throw new errdef.DeferChainKiller(extension.http.webres400WithData(constants.mime.json, JSON.stringify({ errcode: constants.errcodes.claimMobileVC.notFound })));
        else if (smsvc.claimedOn)
            throw new errdef.DeferChainKiller(extension.http.webres400WithData(constants.mime.json, JSON.stringify({ errcode: constants.errcodes.claimMobileVC.claimed })));
        else if (smsvc.expiredOn < now)
            throw new errdef.DeferChainKiller(extension.http.webres400WithData(constants.mime.json, JSON.stringify({ errcode: constants.errcodes.claimMobileVC.expired })));
        else if (smsvc.vcode != me.args.vcode)
            throw new errdef.DeferChainKiller(extension.http.webres400WithData(constants.mime.json, JSON.stringify({ errcode: constants.errcodes.claimMobileVC.notMatch })));
        else if (!targetUser.personal || !targetUser.personal.phone) //no phone set
            throw new errdef.DeferChainKiller(extension.http.webres400WithData(constants.mime.json, JSON.stringify({ errcode: constants.errcodes.claimMobileVC.noPhone })));
        else if (targetUser.mobileV && targetUser.mobileV.phone == targetUser.personal.phone) //already have mobileV
            throw new errdef.DeferChainKiller(extension.http.webres400WithData(constants.mime.json, JSON.stringify({ errcode: constants.errcodes.claimMobileVC.verified })));
        else
            return db.user.updateUsers({ _id: me.operator.objId }, { $set: { mobileV: { verifiedOn: now, phone: targetUser.personal.phone } } });
    })
    .then(function () {
        return db.smsvc.updateSmsVCs({ _id: me.filter.smsvcObjId }, { $set: { claimedOn: now } });
    })
    .then(function () {
        return extension.http.webres200(constants.mime.json);
    });
};

SingleSmsVC.prototype._post = function () {
    var me = this, targetSite;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('POST');
        if (status.isOK()) {
            if (me.args) {
                var handler = handlers[me.vcType];
                if (!handler)
                    throw new errdef.DeferChainKiller(extension.http.webres400());
                return handler.call(me);
            }
            else
                throw new errdef.DeferChainKiller(extension.http.webres400());
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (ret) {
        //just a placeholder for some post-send things
        return ret;
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = SingleSmsVC;