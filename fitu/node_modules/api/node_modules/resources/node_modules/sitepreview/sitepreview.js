
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var _ = require('underscore');

/*
list: [{
'id':,
'name':,
'picUrl':,
}],
total:
*/
var SitePreviews = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.vendorObjId = extension.mongo.tryConvObjId(webreq.search.vendorId);
    me.badFilter = webreq.search.vendorId && !me.filter.vendorObjId;
    me.pageSize = extension.pagination.convPageSize(webreq.search.pageSize, config.pageSize.sitepreview.max, config.pageSize.sitepreview.min, config.pageSize.sitepreview.default);
    me.page = extension.pagination.convPage(webreq.search.page); //page starts from 0
};

SitePreviews.prototype = Object.create(Resource.prototype);

SitePreviews.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    return bluebird.resolve(httpOptions.setStatus('GET', this.badFilter ? 400 : 200));
};

SitePreviews.prototype._get = function () {
    var me = this, total = 0;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK()) {
            var filter = {};
            if (me.filter.vendorObjId) filter.vendorId = me.filter.vendorObjId;
            return bluebird.all([
                db.site.getSitesFieldsInPage(filter, resxutil.sitepreview.getFields, { createdOn: -1 }, me.page * me.pageSize, me.pageSize),
                db.site.countSites(filter)
            ]);
        }
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (data) {
        total = data[1];
        return data[0].map(function (st) { return resxutil.sitepreview.convSitePreview(st); });
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify({ list: data, total: total }));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = SitePreviews;