
var db = require('dbaccess');
var bluebird = require('bluebird');
var extension = require('extension');
var constants = require('const');
var imageUpload = require('imageUpload');
var errdef = require('errdef');
var resxutil = require('resxutil');
var config = require('config');
var Resource = require('resource');
var validate = require('validate');
var infra = require('infra');

/*
'id':,
'name':,
'picUrl':,
*/
var SingleSitePreview = function (webreq) {
    var me = this;
    Resource.call(me, webreq);
    me.filter.siteObjId = extension.mongo.tryConvObjId(webreq.search.siteId);
    me.targetSite_CL = new infra.CachedLoader(function () {
        return db.site.getOneSiteFieldsBy({ _id: me.filter.siteObjId }, resxutil.site.getFields);
    });
};

SingleSitePreview.prototype = Object.create(Resource.prototype);

SingleSitePreview.prototype._accessibility = function () {
    var httpOptions = new resxutil.HttpOptions();
    return bluebird.resolve(httpOptions.setStatus('GET', this.filter.siteObjId ? 200 : 400));
};

SingleSitePreview.prototype._get = function () {
    var me = this;
    return me._accessibility()
    .then(function (httpOptions) {
        var status = httpOptions.getStatus('GET');
        if (status.isOK())
            return db.site.getOneSiteFieldsBy({ _id: me.filter.siteObjId }, resxutil.sitepreview.getFields);
        else
            throw new errdef.DeferChainKiller(status.toWebres());
    })
    .then(function (st) {
        if (st)
            return resxutil.sitepreview.convSitePreview(st);
        else
            throw new errdef.DeferChainKiller(extension.http.webres404());
    })
    .then(function (data) {
        return extension.http.webres200(constants.mime.json, JSON.stringify(data));
    })
    .catch(errdef.DeferChainKiller, function (err) {
        return err.attach;
    });
};

module.exports = SingleSitePreview;