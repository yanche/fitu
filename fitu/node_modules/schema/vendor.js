var validate = require('validate');
var config = require('config');
var extension = require('extension');

/*
'tags': [],
'admins': [],
'location':{
	'address':,
	'geo':,
	},
'intro':,
'logoUrl':,
*/
var adjustVendorUpdate = function (input) {
    if (input == null || !validate.isObj(input))
        return false;
    var ret = {};
    //tags
    if (validate.value(input.tags)) {
        if (Array.isArray(input.tags))
            ret.tags = input.tags;
        else
            return false;
    }
    //admins
    if (validate.value(input.admins)) {
        if (Array.isArray(input.admins))
            ret.admins = extension.array.uniqueObjIdArray(input.admins);
        else
            return false;
    }
    //intro
    if (!validate.nullOrEmptyStr(input.intro)) {
        if (validate.isString(input.intro))
            ret.intro = input.intro;
        else
            return false;
    }
    //logoUrl
    if (validate.value(input.logoUrl)) {
        if (validate.url(input.logoUrl) || validate.picBase64(input.logoUrl))
            ret.logoUrl = input.logoUrl;
        else if (validate.emptyString(input.logoUrl))
            ret.logoUrl = config.defaultVendorLogoUrl;
        else
            return false;
    }
    //location
    if (validate.value(input.location)) {
        var lret = {};
        //address
        if (validate.value(input.location.address)) {
            if (validate.valuedString(input.location.address)) //required
                lret.address = input.location.address;
            else
                return false;
        }
        //geo
        if (validate.value(input.location.geo)) {
            if (validate.isString(input.location.geo))
                lret.geo = input.location.geo;
            else
                return false;
        }
        if (extension.obj.objLen(lret) == 0)
            return false;
        else
            ret.location = lret;
    }
    return extension.obj.objLen(ret) == 0 ? false : ret;
};

/*
'tags': [],
'admins': [],
'location':{
	'address':,
	'geo':,
	},
'intro':,
'logoUrl':,
*/
var adjustVendorCreate = function (input) {
    if (input == null || !validate.isObj(input))
        return false;
    var ret = {};
    //tags
    if (Array.isArray(input.tags))
        ret.tags = input.tags;
    else
        return false;
    //admins
    if (validate.value(input.admins)) {
        if (Array.isArray(input.admins))
            ret.admins = extension.array.uniqueObjIdArray(input.admins);
        else
            return false;
    }
    //intro
    if (validate.isString(input.intro))
        ret.intro = input.intro;
    else
        return false;
    //logoUrl
    if (validate.url(input.logoUrl) || validate.picBase64(input.logoUrl))
        ret.logoUrl = input.logoUrl;
    else if (validate.emptyString(input.logoUrl))
        ret.logoUrl = config.defaultVendorLogoUrl;
    else
        return false;
    //location
    if (validate.isObj(input.location)) {
        var lret = {};
        if (validate.valuedString(input.location.address))
            lret.address = input.location.address;
        else
            return false;
        if (validate.value(input.location.geo)) {
            if (validate.isString(input.location.geo))
                lret.geo = input.location.geo;
            else
                return false;
        }
        ret.location = lret;
    }
    else
        return false;
    return ret;
};

exports.adjustVendorUpdate = adjustVendorUpdate;
exports.adjustVendorCreate = adjustVendorCreate;
