var validate = require('validate');
var config = require('config');
var extension = require('extension');

/*
'name':,
'location':{
	'address':,
	'geo':,
	},
'tags': [],
'vendorId':,
'intro':,
'picUrl':
*/
var adjustSiteUpdate = function (input) {
    if (input == null || !validate.isObj(input))
        return false;
    var ret = {};
    //name, required
    if (validate.value(input.name)) {
        if (validate.valuedString(input.name))
            ret.name = input.name;
        else
            return false;
    }
    //tags
    if (validate.value(input.tags)) {
        if (Array.isArray(input.tags))
            ret.tags = input.tags;
        else
            return false;
    }
    //vendorId
    if (validate.value(input.vendorId)) {
        var vendorObjId = extension.mongo.tryConvObjId(input.vendorId);
        if (vendorObjId)
            ret.vendorId = vendorObjId;
        else if (input.vendorId == "")
            ret.vendorId = "";
        else
            return false;
    }
    //intro
    if (validate.value(input.intro)) {
        if (validate.isString(input.intro))
            ret.intro = input.intro;
        else
            return false;
    }
    //picUrl
    if (validate.value(input.picUrl)) {
        if (validate.url(input.picUrl) || validate.picBase64(input.picUrl))
            ret.picUrl = input.picUrl;
        else if (validate.emptyString(input.picUrl))
            ret.picUrl = config.defaultSitePicUrl;
        else
            return false;
    }
    //location
    if (validate.value(input.location)) {
        var lret = {};
        //address
        if (validate.value(input.location.address)) {
            if (validate.valuedString(input.location.address)) //required
                lret.address = input.location.address;
            else
                return false;
        }
        //geo
        if (validate.value(input.location.geo)) {
            if (validate.isString(input.location.geo))
                lret.geo = input.location.geo;
            else
                return false;
        }
        if (extension.obj.objLen(lret) == 0)
            return false;
        else
            ret.location = lret;
    }
    return extension.obj.objLen(ret) == 0 ? false : ret;
};

/*
'name':,
'location':{
	'address':,
	'geo':,
	},
'tags': [],
'vendorId':,
'intro':,
*/
var adjustSiteCreate = function (input) {
    if (input == null || !validate.isObj(input))
        return false;
    var ret = {};
    //name, required
    if (validate.valuedString(input.name))
        ret.name = input.name;
    else
        return false;
    //tags
    if (Array.isArray(input.tags))
        ret.tags = input.tags;
    else
        return false;
    //vendorId
    if (!validate.nullOrEmptyStr(input.vendorId)) {
        var vendorObjId = extension.mongo.tryConvObjId(input.vendorId);
        if (vendorObjId)
            ret.vendorId = vendorObjId;
        else
            return false;
    }
    else
        ret.vendorId = "";
    //intro
    if (validate.isString(input.intro))
        ret.intro = input.intro;
    else
        return false;
    //picUrl
    if (validate.url(input.picUrl) || validate.picBase64(input.picUrl))
        ret.picUrl = input.picUrl;
    else if (validate.nullOrEmptyStr(input.picUrl))
        ret.picUrl = config.defaultSitePicUrl;
    else
        return false;
    //location
    if (validate.isObj(input.location)) {
        var lret = {};
        if (validate.valuedString(input.location.address))
            lret.address = input.location.address;
        else
            return false;
        if (validate.value(input.location.geo)) {
            if (validate.isString(input.location.geo))
                lret.geo = input.location.geo;
            else
                return false;
        }
        ret.location = lret;
    }
    else
        return false;
    return ret;
};

exports.adjustSiteUpdate = adjustSiteUpdate;
exports.adjustSiteCreate = adjustSiteCreate;
