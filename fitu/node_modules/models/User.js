
var extension = require('extension');
var bluebird = require('bluebird');
var db = require('dbaccess');
var infra = require('infra');

var User = function (id) {
    var me = this;
    me.objId = extension.mongo.tryConvObjId(id);
    
    //{god:, ob}
    me.specialRole_CL = new infra.CachedLoader(function () {
        return db.user.getOneUserFieldsBy({ _id: me.objId }, { special: 1 })
        .then(function (usr) {
            return { god: usr ? Boolean(usr.special & 1) : false, ob: usr ? Boolean(usr.special & 2) : false };
        });
    });
    //{owner: [], admin: []}
    me.vendorRole_CL = new infra.CachedLoader(function () {
        return bluebird.all([db.vendor.getVendorsFieldsBy({ ownerId: me.objId }, { _id: 1 }), db.vendor.getVendorsFieldsBy({ admins: me.objId }, { _id: 1 })])
        .then(function (data) {
            return { owner: data[0].map(function (vd) { return vd._id; }), admin: data[1].map(function (vd) { return vd._id; }) };
        });
    });
    //[]
    me.activityRole_CL = new infra.CachedLoader(function () {
        return db.activity.getActsFieldsBy({ createdBy: me.objId }, { _id: 1 })
        .then(function (acts) {
            return acts.map(function (act) { return act._id; });
        });
    });
};

User.prototype.vendorWritable = function (vendorObjId) {
    var me = this;
    return bluebird.all([me.specialRole_CL.load(), me.vendorRole_CL.load()])
    .then(function (data) {
        var sr = data[0], vdr = data[1];
        return sr.god || vdr.owner.some(function (o) { return o.equals(vendorObjId); }) || vdr.admin.some(function (a) { return a.equals(vendorObjId); });
    });
};

User.prototype.activityWritable = function (actObjId) {
    var me = this;
    return bluebird.all([me.specialRole_CL.load(), me.activityRole_CL.load()])
    .then(function (data) {
        var sr = data[0], actr = data[1];
        return sr.god || actr.some(function (act) { return act.equals(actObjId); });
    });
};

User.prototype.isGod = function () {
    var me = this;
    return me.specialRole_CL.load()
    .then(function (sr) {
        return sr.god;
    });
};

User.prototype.isGodOrOb = function () {
    var me = this;
    return me.specialRole_CL.load()
    .then(function (sr) {
        return sr.god || sr.ob;
    });
};

User.prototype.isOb = function () {
    var me = this;
    return me.specialRole_CL.load()
    .then(function (sr) {
        return sr.ob;
    });
};

module.exports = User;