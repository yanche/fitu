
var WxCachedLoader = require('./WxCachedLoader.js');
var https = require('https');
var extension = require('extension');
var validate = require('validate');
var bluebird = require('bluebird');
var config = require('config');

var loadToken = function (appId, appSecret) {
    var options = {
        hostname: 'api.weixin.qq.com',
        port: 443,
        path: '/cgi-bin/token?grant_type=client_credential&appid=' + appId + '&secret=' + appSecret,
        method: 'GET'
    };
    var failureWaitSec = 60 * 5; //5 mins
    var defer = new bluebird.defer();
    var req = https.request(options, function (res) {
        extension.http.getRawBody(res)
        .then(function (bd) {
            console.log('token received: ' + bd.toString());
            var tokenObj = extension.http.parseBody(bd, res.headers['content-type']);
            var expiresIn = Number(tokenObj.expires_in);
            if (!validate.valuedString(tokenObj.access_token) || !tokenObj.expires_in || isNaN(expiresIn) || expiresIn <= 100) {
                console.error('failed to validate wx token: ');
                console.info(tokenObj);
                defer.resolve([null, failureWaitSec]);
            }
            else {
                console.log('finish loading wx token...');
                defer.resolve([{ token: tokenObj.access_token }, expiresIn]);
            }
        })
        .catch(function (err) {
            console.error('error when loading wx token: ' + err.stack);
            defer.resolve([null, failureWaitSec]);
        });
    });
    req.end();
    console.log('start loading wx token...');
    
    req.on('error', function (err) {
        console.error('error when loading wx token: ' + err.stack);
        defer.resolve([null, failureWaitSec]);
    });
    return defer.promise;
};

var loadJsApiTicket = function (token) {
    var options = {
        hostname: 'api.weixin.qq.com',
        port: 443,
        path: '/cgi-bin/ticket/getticket?access_token=' + token + '&type=jsapi',
        method: 'GET'
    };
    var failureWaitSec = 60 * 5; //5 mins
    var defer = new bluebird.defer();
    var req = https.request(options, function (res) {
        extension.http.getRawBody(res)
        .then(function (bd) {
            console.log('jsapi ticket received: ' + bd.toString());
            var ticketObj = extension.http.parseBody(bd, res.headers['content-type']);
            var expiresIn = Number(ticketObj.expires_in);
            if (!validate.valuedString(ticketObj.ticket) || !ticketObj.expires_in || isNaN(expiresIn) || expiresIn <= 100) {
                console.error('failed to validate wx jsapi ticket: ');
                console.info(ticketObj);
                defer.resolve([null, failureWaitSec]);
            }
            else {
                console.log('finish loading wx jsapi ticket...');
                defer.resolve([{ ticket: ticketObj.ticket }, expiresIn]);
            }
        })
        .catch(function (err) {
            console.error('error when loading wx jsapi ticket: ' + err.stack);
            defer.resolve([null, failureWaitSec]);
        });
    });
    req.end();
    console.log('start loading wx jsapi ticket...');
    
    req.on('error', function (err) {
        console.error('error when loading wx jsapi ticket: ' + err.stack);
        defer.resolve([null, failureWaitSec]);
    });
    return defer.promise;
};

var WxSecret = function (options) {
    var me = this;
    me.appId = options.appId;
    me.appSecret = options.appSecret;
    me._token_CL = new WxCachedLoader(function () {
        return loadToken(me.appId, me.appSecret);
    });
    me._ticket_CL = new WxCachedLoader(function () {
        return me._token_CL.load()
        .then(function (data) {
            return data ? loadJsApiTicket(data.token) : null;
        })
    });
};

WxSecret.prototype.getToken = function () {
    return config.env != 'dev' ? this._token_CL.load() : bluebird.resolve('');
};

WxSecret.prototype.getJsApiTicket = function () {
    return config.env != 'dev' ? this._ticket_CL.load() : bluebird.resolve('');
};

WxSecret.prototype.getJsApiConfig = function (url) {
    return this.getJsApiTicket()
    .then(function (data) {
        if (data) {
            var ret = {
                jsapi_ticket: data.ticket,
                nonceStr: createNonceStr(),
                timestamp: createTimestamp(),
                url: url
            };
            ret.signature = extension.crypto.sha1(raw(ret));
            delete ret.jsapi_ticket;
            ret.appId = config.wx.appId;
            return ret;
        }
        else
            return null;
    });
};

var createNonceStr = function () {
    return Math.random().toString(36).substr(2, 15);
};

var createTimestamp = function () {
    return parseInt(new Date().getTime() / 1000) + '';
};

var raw = function (args) {
    var keys = Object.keys(args);
    keys = keys.sort()
    var ret = [];
    keys.forEach(function (key) {
        ret.push(key.toLowerCase() + '=' + args[key]);
    });
    console.log(ret.join('&'));
    return ret.join('&');
};

module.exports = WxSecret;