
var as = require('azure-storage');
var stream = require('stream');
var fs = require('fs');
var log = require('log');
var bluebird = require('bluebird');
var path = require('path');
var extension = require('extension');
var config = require('config');

var host = 'fitu.blob.core.chinacloudapi.cn';
var account = 'fitu';
var key = '5EUKtJXcBsCpYzU73sYjsiYqlTR8N0HROSlZURvwvGtuSueLGqNv27L3yWsvpd84IP2XadAqri5fmS9bpN4Lyw==';
var container = 'fituexternal';

exports.init = function () {
    afs = as.createBlobService(account, key, host);
    afs.createContainerIfNotExists(container, { publicAccessLevel : 'blob' }, function (err, result, response) {
        if (err)
            log.critical({ type: 'failed to create azure storage container' }, { err: err });
        else
            initialized = true;
    });
};
//return: { path: '' }
exports.handle = function (buffer, filename, dirname) {
    var defer = new bluebird.defer();
    if (!afs || !initialized)
        defer.reject(new Error('azure blob service not successfully created, or container not successfully created.'));
    else {
        var blobname = path.join(config.env, (dirname || ''), extension.random.getRandom() + 'rd' + filename).replace(/[\/\\]/g, '_').toLowerCase();
        log.debug({ type: 'creating azure blob' }, { filename: filename, dirname: dirname, blobname: blobname, bufferLen: buffer.length });
        afs.createBlockBlobFromText(container, blobname, buffer, function (err, result, response) {
            if (err) {
                log.error({ type: 'failed to create azure blob' }, { err: err });
                defer.reject(err);
            }
            else {
                log.debug({ type: 'successfully create a azure blob' }, { result: result, response: response });
                defer.resolve({ path: blobname, storage: 'azure' });
            }
        })
    }
    return defer.promise;
};
