
var qiniu = require('qiniu');
var path = require('path');
var bluebird = require('bluebird');
var log = require('log');
var extension = require('extension');
var config = require('config');

qiniu.conf.ACCESS_KEY = '4Uf5MQTv4c8VCVz3h4BuDvEnY92oeHd-30JXIMmy';
qiniu.conf.SECRET_KEY = 'XwqLsCO-AgKI35gvwNC4RUGYcFSNQSpMlBnWnsXS';
var bucketName = 'yanche';
var expInSeconds = 60 * 60; //1hour

var uptoken = null;
var genUptoken = function () {
    var putPolicy = new qiniu.rs.PutPolicy(bucketName);
    putPolicy.expires = expInSeconds; //1hour expire
    uptoken = putPolicy.token();
    setTimeout(genUptoken, expInSeconds / 2);
};
genUptoken();

//return: { path: '' }
exports.handle = function (buffer, filename, dirname) {
    var defer = new bluebird.defer();
    var keyname = path.join(config.env, (dirname || ''), extension.random.getRandom() + 'rd' + filename).replace(/[\/\\]/g, '_').toLowerCase();
    log.debug({ type: 'creating qiniu file' }, { filename: filename, dirname: dirname, keyname: keyname, bufferLen: buffer.length });
    qiniu.io.put(uptoken, keyname, buffer, null, function (err, ret) {
        if (err) {
            log.error({ type: 'failed to create qiniu file' }, { err: err });
            defer.reject(err);
        }
        else {
            log.debug({ type: 'successfully create a qiniu file' }, { ret: ret });
            defer.resolve({ path: keyname, storage: 'qiniu' });
        }
    });
    return defer.promise;
};
