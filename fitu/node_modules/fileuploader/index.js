
var bluebird = require('bluebird');
var http = require('http');
var url = require('url');
var extension = require('extension');
var path = require('path');
var mime = require('mime');
var fs = require('fs');
var config = require('config');
var errdef = require('errdef');
var events = require('events');
var constants = require('const');

var FileUploader = function (options) {
    var me = this;
    this.options = options || {};
    this.options.fsBase = this.options.fsBase || __dirname;
    this.options.urlBase = this.options.urlBase || '';

    this.pendingQueue = [];
    this.uploadEmitter = new events.EventEmitter();
    this.uploading = false;
    this.uploadEmitter.on('upload', function () {
        _upload.call(me);
    });
};

FileUploader.prototype.handle = function (webreq) {
    var defer = new bluebird.defer();
    if (this.options.token && webreq.search.token === this.options.token) {
        this.pendingQueue.push({ input: webreq.body.parsed, defer: defer });
        this.uploadEmitter.emit('upload');
    }
    else
        defer.resolve(extension.http.webres400());
    return defer.promise;
};

module.exports = FileUploader;

var _upload = function () {
    var me = this;
    if (!me.uploading && me.pendingQueue.length > 0) {
        me.uploading = true;
        _uploadFilesInQueue.call(me)
        .then(function () {
            me.uploading = false;
            if (me.pendingQueue.length > 0)
                me.uploadEmitter.emit('upload');
        });
    }
};

//{ 'input': [{'data':, 'mime':, 'subfolder': }] or {'data':, 'mime':, 'subfolder': }, 'defer': }
var _uploadFilesInQueue = function () {
    var me = this;
    if (me.pendingQueue.length > 0) {
        var toUpload = me.pendingQueue.shift();
        return _uploadFile.call(me, toUpload.input)
        .then(function (urls) {
            toUpload.defer.resolve(extension.http.webres200(constants.mime.json, JSON.stringify(urls)));
        })
        .catch(errdef.BadArgumentsError, function (err) {
            console.log(err.message);
            toUpload.defer.resolve(extension.http.webres400());
        })
        .catch(function (err) {
            console.log(err.stack);
            toUpload.defer.resolve(extension.http.webres500());
        })
        .then(function () {
            return _uploadFilesInQueue.call(me);
        });
    }
    else
        return bluebird.Promise.resolve();
};

//input: [{'data':, 'mime':, 'subfolder': }] or {'data':, 'mime':, 'subfolder': }
//output: ['url1', 'url2', ...]
var _uploadFile = function (input) {
    if (Array.isArray(input)) {
        if (input.length == 0)
            return bluebird.Promise.resolve([]);
        else
            return _saveFiles2LocalOneByOne.call(this, input, 0, []);
    }
    else {
        return _saveFile2Local.call(this, input);
    }
};

var _saveFiles2LocalOneByOne = function (fileInputArr, offset, output) {
    return _saveFile2Local.call(this, fileInputArr[offset])
    .then(function (ret) {
        output.push(ret);
        if (fileInputArr.length > offset + 1)
            return _saveFiles2LocalOneByOne.call(this, fileInputArr, offset + 1, output);
        else
            return output;
    });
};

//{'data':, 'mime':, 'subfolder': }
var _saveFile2Local = function (fileInput) {
    //input check
    if (!fileInput || !fileInput.data || !fileInput.mime || (typeof fileInput.mime) !== 'string' || fileInput.mime.slice(0, 6) !== 'image/')
        throw new errdef.BadArgumentsError('file input: ' + JSON.stringify(fileInput));
    var ext = fileInput.mime.slice(6); //fileInput.mime: image/jpeg, image/png ...
    if (supportedImageMime.every(function (v) { return v !== ext; }))
        throw new errdef.BadArgumentsError('file image extension: ' + ext);
    var subfolder = fileInput.subfolder || 'unknown';
    var urlBase = path.join(this.options.urlBase, subfolder);
    var fname = extension.random.getRandomWithTimestamp() + '.' + ext;
    var fsFolder = path.join(this.options.fsBase, urlBase);
    var fsPath = path.join(fsFolder, fname);
    var imgUrl = path.join(urlBase, fname).replace(/\\/g, '/'); //replace if windows
    return extension.file.mkdirp(fsFolder)
    .then(function () {
        var defer = new bluebird.defer();
        fs.writeFile(fsPath, fileInput.data, 'base64', function (err) {
            if (err) {
                defer.reject(err); //no file saved
            }
            else {
                defer.resolve(imgUrl); //return saved file's url for website
            }
        })
        return defer.promise;
    });
};

var supportedImageMime = ['jpg', 'jpeg', 'png', 'bmp'];