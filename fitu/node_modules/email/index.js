
var mailer = require('nodemailer');
var db = require('dbaccess');
var validate = require('validate');
var config = require('config');
var bluebird = require('bluebird');
var errdef = require('errdef');
var jade = require('jade');
var path = require('path');

//email list could be string or array
//would throw exception if invalid input, including subject/body/email addrs
var sendEmail = function (option) {
    var toList = option.toList;
    var ccList = option.ccList;
    var bccList = option.bccList;
    var subject = option.subject;
    var body = option.body;
    //var html = Boolean(option.html);
    
    if (!validate.isString(subject) || !validate.isString(body))
        throw new Error('invalid subject or body when sending email');
    
    var toStr = concatEmailList(toList);
    var ccStr = concatEmailList(ccList);
    var bccStr = concatEmailList(bccList);
    
    var mailOptions = {
        from: config.smtpFrom,
        to: toStr,
        cc: ccStr,
        bcc: bccStr,
        subject: subject,
        html: body
    }
    
    return _send(mailOptions)
    .then(function (comments) {
        db.email.insertOneEmail({
            from: config.smtpFrom,
            to: toList,
            cc: ccList,
            bcc: bccList,
            subject: subject,
            body: body,
            comments: comments
        });
        return comments;
    })
    .catch(function (err) {
        throw new errdef.EmailError(err);
    });
};

var _send = function (mailOptions) {
    var defer = new bluebird.defer();
    if (config.canSendEmail) {
        _smtpTrans.sendMail(mailOptions, function (err, response) {
            if (err)
                defer.reject(err);
            else
                defer.resolve("Message sent: " + response.message);
        });
    }
    else
        defer.resolve('not really send out, because not prod deployment');
    return defer.promise;
};

//input: email or list of email
//output: email1, email2, ... OR ''
var concatEmailList = function (lst) {
    if (lst == null)
        return null;
    else if (validate.isString(lst)) {
        if (validate.email(lst, true))
            return lst;
        else
            throw new Error('invalid email list: ' + lst);
    }
    else if (Array.isArray(lst)) {
        if (lst.length == 0)
            return null;
        else {
            var valid = lst.every(function (v) { return validate.email(v); });
            if (valid)
                return lst.join(',');
            else
                throw new Error('invalid email list: ' + lst);
        }
    }
    else
        throw new Error('invalid email list: ' + lst);
};

var _smtpTrans = mailer.createTransport({
    host: config.smtpHost, // hostname
    port: config.smtpPort,
    auth: config.smtpAuth
});

//receiver: {'ticket': }
var formatPwdresetNotification = function (newpwd) {
    var compiler = _getTemplateCompiler('pwdreset');
    return compiler({ resetpwd: newpwd });
};

var _getTemplateCompiler = function (template) {
    if (config.cacheEmailTemplates && _jadeTemplateCompilers[template])
        return _jadeTemplateCompilers[template];
    else {
        var cpl = jade.compileFile(path.join(__dirname, 'templates', template + '.jade'), {});
        if (config.cacheEmailTemplates) {
            console.log('cache email template jade: ' + template);
            _jadeTemplateCompilers[template] = cpl;
        }
        return cpl;
    }
};

var _jadeTemplateCompilers = {};

exports.sendEmail = sendEmail;
exports.formatPwdresetNotification = formatPwdresetNotification;
