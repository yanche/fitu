
var bluebird = require('bluebird');
var config = require('config');
var extension = require('extension');
var url = require('url');
var https = require('https');
var log = require('log');
var db = require('dbaccess');
var constants = require('const');
var userdefaultheadpic = require('userdefaultheadpic');
var mongo = require('mongodb');

//rawbody, args, cookies, location, search
//to attach: userId
var handle = function (webreq) {
    var homePageUrl = url.format({ protocol: config.userWebServer.protocol, hostname: config.userWebServer.hostname, port: config.userWebServer.port });
    return webreq.authenticate()
    .then(function () {
        if (webreq.user)
            return extension.http.webres302({ Location: homePageUrl });
        if (!webreq.search.code)
            return extension.http.webres302({ Location: url.format({ protocol: config.userWebServer.protocol, hostname: config.userWebServer.hostname, port: config.userWebServer.port, pathname: '/#/login' }) });
        else {
            return accessTokenFetch(webreq.search.code)
            .then(function (data) {
                return bluebird.all([db.user.getOneUserFieldsBy({ wechatOpenId: data.openId }, { _id: 1 }), getWechatUserInfo(data.accessToken, data.openId)])
                .then(function (datammm) {
                    var him = datammm[0], himinfo = datammm[1];
                    var genderFromWechat = himinfo.sex == 1 ? constants.common.gender.male : (himinfo.sex == 2 ? constants.common.gender.female : constants.common.gender.unknown);
                    if (him)
                        return db.user.updateUsers({ _id: him._id }, { $set: { lastWechatAuthPrint: data, wechatUserInfo: himinfo, 'personal.nickName': himinfo.nickName, 'personal.gender': genderFromWechat, headUrl: { path: himinfo.headUrl, storage: 'raw' } } })
                        .then(function () { return him._id; });
                    else {
                        var email = (new mongo.ObjectID().toString()) + '@wechat.login';
                        var newUser = {
                            personal: { gender: genderFromWechat , contact: email, nickName: himinfo.nickName },
                            email: email,
                            hash_pwd: '',
                            headUrl: { path: himinfo.headUrl, storage: 'raw' },
                            special: 0,
                            subscribe: { users: [], sites: [] },
                            fans: [],
                            wechatOpenId: data.openId,
                            lastWechatAuthPrint: data,
                            wechatUserInfo: himinfo
                        };
                        return db.user.insertOneUser(newUser)
                        .then(function (inserted) { return inserted._id; });
                    }
                })
                .then(function (_id) {
                    var now = new Date();
                    return db.session.insertOneSession({ 'userId': _id, 'sessionId': extension.random.getRandomWithTimestamp(), 'createdOn': now, 'lastAccess': now });
                })
                .then(function (inserted) {
                    if (inserted) {
                        var cookies = [];
                        cookies.push(extension.http.serializeCookie('sessionId', inserted.sessionId.toString(), { expires: 365 * 10 }));
                        cookies.push(extension.http.serializeCookie('userId', inserted.userId.toString(), { expires: 365 * 10 }));
                        return extension.http.webres302({ Location: homePageUrl , 'Set-Cookie' : cookies });
                    }
                    else
                        return extension.http.webres302({ Location: homePageUrl });
                });
            })
            .catch(function (err) {
                log.error({ type: 'wechat login error' }, { err: err });
                return extension.http.webres302({ Location: homePageUrl });
            });
        }
    })
    .then(function (webres) {
        return webres;
    });
};

var accessTokenFetch = function (code) {
    var defer = new bluebird.defer();
    var req = https.request({
        host: 'api.weixin.qq.com',
        path: '/sns/oauth2/access_token?appid=wx1da5b1b0cc1f5bda&secret=986609a4088cc4f19e283e63cc21d4bf&code=' + code + '&grant_type=authorization_code'
    }, function (res) {
        extension.http.getRawBody(res)
        .then(function (raw) {
            return extension.http.parseBody(raw, 'application/json');
        })
        .then(function (data) {
            if (!data || data.errcode)
                defer.reject(new Error('wechat return: ' + JSON.stringify(data)));
            else {
                defer.resolve({
                    accessToken: data.access_token,
                    expiresIn: data.expires_in,
                    refreshToken: data.refresh_token,
                    openId: data.openid,
                    scope: data.scope,
                    unionid: data.unionid,
                    _raw: data
                });
            }
        })
        .catch(function (err) {
            defer.reject(err);
        })
    });
    req.end();
    req.on('error', function (e) {
        defer.reject(e);
    });
    return defer.promise;
};

var getWechatUserInfo = function (accessToken, openId) {
    var defer = new bluebird.defer();
    var req = https.request({
        host: 'api.weixin.qq.com',
        path: '/sns/userinfo?access_token=' + accessToken + '&openid=' + openId
    }, function (res) {
        extension.http.getRawBody(res)
        .then(function (raw) {
            return extension.http.parseBody(raw, 'application/json');
        })
        .then(function (data) {
            if (!data || data.errcode)
                defer.reject(new Error('wechat get userinfo return: ' + JSON.stringify(data)));
            else {
                defer.resolve({
                    openId: data.openid,
                    nickName: data.nickname,
                    sex: data.sex,
                    province: data.province,
                    city: data.city,
                    country: data.country,
                    headUrl: data.headimgurl,
                    privilege: data.privilege,
                    unionid: data.unionid,
                    _raw: data
                });
            }
        })
        .catch(function (err) {
            defer.reject(err);
        })
    });
    req.end();
    req.on('error', function (e) {
        defer.reject(e);
    });
    return defer.promise;
};

exports.handle = handle;