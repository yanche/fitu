var mongodb = require('mongodb');
var bluebird = require('bluebird');

var _db = null;

var dbClient = {};

dbClient.resetConn = function (db) {
    _db = db;
};

//no input check, should only be referenced by application code.
dbClient.getColl = function (collName) {
    return _db.collection(collName);
};

dbClient.getOneDocFields = function (collName, filter, fields) {
    var defer = new bluebird.defer();
    dbClient.getColl(collName).findOne(filter, fields, function (err, doc) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(doc);
    });
    return defer.promise;
};

dbClient.getDocsFields = function (collName, filter, fields) {
    var defer = new bluebird.defer();
    dbClient.getColl(collName).find(filter, fields).toArray(function (err, docs) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(docs);
    });
    return defer.promise;
};

dbClient.getDocsFieldsInPage = function (collName, filter, fields, orderby, skip, take) {
    var defer = new bluebird.defer();
    dbClient.getColl(collName).find(filter, fields).sort(orderby).limit(take + skip).skip(skip).limit(take).toArray(function (err, docs) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(docs);
    });
    return defer.promise;
};

dbClient.insertOneDoc = function (collName, doc) {
    //no delete _id
    var defer = new bluebird.defer();
    dbClient.getColl(collName).insert(doc, function (err, rets) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(rets ? rets[0] : null); //insert one
    });
    return defer.promise;
};

dbClient.insertDocs = function (collName, docs) {
    //no delete _id
    var defer = new bluebird.defer();
    dbClient.getColl(collName).insert(docs, function (err, rets) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(rets);
    });
    return defer.promise;
};

dbClient.updateDocs = function (collName, filter, update) {
    var defer = new bluebird.defer();
    dbClient.getColl(collName).update(filter, update, { 'multi': true }, function (err, ct) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(ct);
    });
    return defer.promise;
};

dbClient.upsertDocs = function (collName, filter, update) {
    var defer = new bluebird.defer();
    dbClient.getColl(collName).update(filter, update, { 'multi': true, 'upsert': true }, function (err, ct) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(ct);
    });
    return defer.promise;
};

dbClient.removeDocs = function (collName, filter) {
    var defer = new bluebird.defer();
    dbClient.getColl(collName).remove(filter, function (err, ct) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(ct);
    });
    return defer.promise;
};

dbClient.countDocs = function (collName, filter) {
    var defer = new bluebird.defer();
    dbClient.getColl(collName).count(filter, function (err, ct) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(ct);
    });
    return defer.promise;
};

dbClient.findAndModify = function (collName, filter, update, fields, returnnew) {
    var defer = new bluebird.defer();
    dbClient.getColl(collName).findAndModify(filter, [['_id','asc']], update, { 'new': Boolean(returnnew), 'fields': fields }, function (err, ret) {
        if (err)
            defer.reject(err);
        else
            defer.resolve(ret)
    });
    return defer.promise;
};

module.exports = dbClient;
