
var bluebird = require('bluebird');
var https = require('https');
var extension = require('extension');
var errdef = require('errdef');

var genVC = function () {
    var num = Math.ceil(Math.random() * 10000);
    if (num == 10000)
        num = 9999;
    var num = num.toString();
    while (num.length < 4) {
        num = '0' + num;
    }
    return num;
};

var yzxConfig = {
    version: '2014-06-30',
    acctSid: '544ed7bfd5cf3a23c5fbc8c86e75f821',
    acctToken: '656bdbe473d3c78bd019a3c861cc31bc',
    appId: '9b92d099787449b2b98179e1547e3c3c',
    expire: 50 * 60
};

var getYZXAuthHeader = function (timestamp) {
    var raw = new Buffer(yzxConfig.acctSid + ':' + timestamp);
    return raw.toString('base64');
};

var getYZXSig = function (timestamp) {
    var raw = yzxConfig.acctSid + yzxConfig.acctToken + timestamp;
    return extension.crypto.md5(raw).toUpperCase();
};

var yunZhiXun = function (options) {
    var defer = new bluebird.defer();
    var vc = genVC();
    console.log('vc generated: ' + vc);
    var timestamp = extension.datetime.chinaNow('YYYYMMDDHHmmss'); timestamp = '20150321180043';
    var reqData = new Buffer(JSON.stringify({ templateSMS: { appId: yzxConfig.appId, templateId: '4316', to: '15201928369', param: ['手机认证', vc].join(',') } }));
    var req = https.request({
        hostname: 'api.ucpaas.com',
        port: 443,
        path: '/' + yzxConfig.version + '/Accounts/' + yzxConfig.acctSid + '/Messages/templateSMS?sig=' + getYZXSig(timestamp),
        method: 'POST',
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json;charset=utf-8',
            'Content-Length': reqData.length,
            Authorization: getYZXAuthHeader(timestamp)
        }
    }, function (res) {
        var ret = '';
        res.on('data', function (data) {
            console.log('sms data response received');
            ret += data;
        }).on('end', function () {
            console.log('sms data response ends');
            var data = JSON.stringify(ret);
            console.info(data);
            defer.resolve({ smsId: data.resp.templateSMS.smsId, code: vc, raw: data });
        });
    });
    req.end(reqData);
    req.on('error', function (err) {
        console.log('sms error');
        console.log(err.stack);
        defer.reject(new errdef.SmsError(err));
    });
    return defer.promise;
};

var providers = {
    yzx: {
        handler: yunZhiXun,
        name: 'yunZhiXun'
    }
};

exports.getSmsProvider = function () {
    return providers.yzx;
};