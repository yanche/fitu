
var constants = require('const');
var bluebird = require('bluebird');
var infra = require('infra');
var extension = require('extension');
var Webres = infra.Webres;
var config = require('config');

var webres200 = function (type, content, headers) {
    return new Webres(200, type, content, headers);
};

var webres201 = function (type, content, headers) {
    return new Webres(201, type, content, headers);
};

var webres302 = function (headers) {
    return new Webres(302, constants.mime.plain, 'redirection', headers);
};

var webres304 = function (headers) {
    return new Webres(304, constants.mime.plain, 'not modified', headers);
};

var webres400 = function (headers) {
    return new Webres(400, constants.mime.plain, 'bad request', headers);
};

var webres400WithData = function (type, content, headers) {
    return new Webres(400, type, content, headers);
};

var webres401 = function (headers) {
    return new Webres(401, constants.mime.plain, 'not authorized', headers);
};

var webres404 = function (headers) {
    return new Webres(404, constants.mime.plain, 'not found', headers);
};

var webres405 = function (headers) {
    return new Webres(405, constants.mime.plain, 'not allowed', headers);
};

var webres409 = function (headers) {
    return new Webres(409, constants.mime.plain, 'conflict', headers);
};

var webres500 = function (headers) {
    return new Webres(500, constants.mime.plain, 'internal error', headers);
};

//cookie string. key1=values1;key2=value2
//cookies obj: {key1:value1,key2:value2}
var _parseCookie = function (cookiestr) {
    var ret = {};
    if (cookiestr) {
        var set = cookiestr.split(';');
        for (var i = 0; i < set.length; ++i) {
            var pair = set[i].split('=');
            var l = pair[0].trim();
            if (l) {
                ret[l] = pair[1].trim();
            }
        }
    }
    return ret;
};

var _getRawBody = function (reqres) {
    var defer = new bluebird.defer(), bf = [];
    reqres.on('data', function (d) {
        bf.push(d);
    }).on('end', function () {
        defer.resolve(Buffer.concat(bf));
    }).on('error', function (err) {
        defer.reject(err);
    });
    return defer.promise;
};

//TODO: more types
var _parseBody = function (rawbody, mime) {
    if (mime && mime.indexOf('application/json') == 0)
        return extension.json.tryParseJson(rawbody.toString(constants.common.UTF8));
    else
        return null;
};

var serializeCookie = function (key, val, opt) {
    if (key && val) {
        var pairs = [key + '=' + val];
        if (opt) {
            if (opt.maxAge) pairs.push('Max-Age=' + opt.maxAge);
            if (opt.expires) pairs.push('Expires=' + opt.expires);
            if (opt.httpOnly) pairs.push('HttpOnly');
            if (opt.secure) pairs.push('Secure');
        }
        pairs.push('Path=/');
        pairs.push('Domain=' + config.domain);
        return pairs.join('; ');
    }
    else
        return null;
};

exports.webres200 = webres200;
exports.webres201 = webres201;
exports.webres302 = webres302;
exports.webres304 = webres304;
exports.webres400 = webres400;
exports.webres400WithData = webres400WithData;
exports.webres401 = webres401;
exports.webres404 = webres404;
exports.webres405 = webres405;
exports.webres409 = webres409;
exports.webres500 = webres500;
exports.parseCookie = _parseCookie;
exports.getRawBody = _getRawBody;
exports.parseBody = _parseBody;
exports.serializeCookie = serializeCookie;